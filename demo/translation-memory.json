{
  "zh-CN": {
    "7bd1a54063b9edc5591733a3e853797d": {
      "source": "> This tutorial lets you write a Kotlin application and use Koin dependency injection to retrieve your components.\n> You need around __10 min__ to do the tutorial.",
      "translation": "> 本教程将引导你编写一个 Kotlin 应用程序，并使用 Koin 依赖注入来检索你的组件。\n> 完成本教程大约需要 __10 分钟__。\n",
      "lastUpdated": "2025-04-04T23:04:10.166Z"
    },
    "5a80d1e39f0349e6f5e9279714412871": {
      "source": ":::note\nupdate - 2024-10-21\n:::",
      "translation": "n\n:::note\n更新 - 2024-10-21\n:::",
      "lastUpdated": "2025-04-04T23:04:10.612Z"
    },
    "2b8a2a04eabb59f5c5daefb95038a477": {
      "source": "## Get the code",
      "translation": "n\n## 获取代码",
      "lastUpdated": "2025-04-04T23:04:11.014Z"
    },
    "1f3669fb95d203a51d06537dc42fbc56": {
      "source": ":::info\n[The source code is available at on Github](https://github.com/InsertKoinIO/koin-getting-started/tree/main/kotlin)\n:::",
      "translation": "n\n:::info\n[源代码可在 Github 上找到](https://github.com/InsertKoinIO/koin-getting-started/tree/main/kotlin)\n:::",
      "lastUpdated": "2025-04-04T23:04:11.561Z"
    },
    "adec9a59431af90a3caaa956d798a450": {
      "source": "## Setup",
      "translation": "n\n## 设置",
      "lastUpdated": "2025-04-04T23:04:11.953Z"
    },
    "e50c7a9b0bd9e6b67af7750b2cd7998b": {
      "source": "First, check that the `koin-core` dependency is added like below:",
      "translation": "n\n首先，请检查是否已添加 `koin-core` 依赖项，如下所示：",
      "lastUpdated": "2025-04-04T23:04:12.421Z"
    },
    "91cbc4e731c9081ba9e3327b1ef2a23e": {
      "source": "```groovy\ndependencies {\n    \n    // Koin for Kotlin apps\n    compile \"io.insert-koin:koin-core:$koin_version\"\n}\n```",
      "translation": "```groovy\ndependencies {\n    \n    // Koin for Kotlin apps\n    compile \"io.insert-koin:koin-core:$koin_version\"\n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:12.960Z"
    },
    "22c71e24831487e7a3df82ccd5c4fb41": {
      "source": "## Application Overview",
      "translation": "n\n## 应用概览",
      "lastUpdated": "2025-04-04T23:04:13.360Z"
    },
    "32b2eec70c909f46d48de1dc18adeb4e": {
      "source": "The idea of the application is to manage a list of users, and display it in our `UserApplication` class:",
      "translation": "n\n这个应用程序的目的是管理一个用户列表，并在我们的 `UserApplication` 类中显示它：",
      "lastUpdated": "2025-04-04T23:04:13.826Z"
    },
    "8d3f005d0c3db2a9af30a29ce6d18f07": {
      "source": "> Users -> UserRepository -> UserService -> UserApplication",
      "translation": "n\n> 用户 -> UserRepository -> UserService -> UserApplication",
      "lastUpdated": "2025-04-04T23:04:14.219Z"
    },
    "0cc83334c1693f06bf97e898167c0ccf": {
      "source": "## The \"User\" Data",
      "translation": "n\n## “用户”数据",
      "lastUpdated": "2025-04-04T23:04:14.626Z"
    },
    "18215c8506c3511533fa44347d77514e": {
      "source": "We will manage a collection of Users. Here is the data class: ",
      "translation": "```markdown\n我们将管理一个 User 的集合。以下是数据类：\n```\n",
      "lastUpdated": "2025-04-04T23:04:15.075Z"
    },
    "c680db967853a3c68ad8afa2ddc336d7": {
      "source": "```kotlin\ndata class User(val name : String)\n```",
      "translation": "```kotlin\ndata class User(val name : String)\n```\n",
      "lastUpdated": "2025-04-04T23:04:15.466Z"
    },
    "688a3bd989b585e028fcc3dd5d60ed49": {
      "source": "We create a \"Repository\" component to manage the list of users (add users or find one by name). Here below, the `UserRepository` interface and its implementation:",
      "translation": "n\n我们创建一个 “Repository” 组件来管理用户列表（添加用户或按名称查找）。下面是 `UserRepository` 接口及其实现：",
      "lastUpdated": "2025-04-04T23:04:15.963Z"
    },
    "948bf684d5a02abc4ece9b09bea35cc8": {
      "source": "```kotlin\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```",
      "translation": "```kotlin\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```",
      "lastUpdated": "2025-04-04T23:04:16.708Z"
    },
    "c64f3d2f68732f166a0b7591dd0be104": {
      "source": "## The Koin module",
      "translation": "n\n## Koin 模块",
      "lastUpdated": "2025-04-04T23:04:17.087Z"
    },
    "ccded6d80c921fcbd9bbcf7d1031d237": {
      "source": "Use the `module` function to declare a Koin module. A Koin module is the place where we define all our components to be injected.",
      "translation": "n\n使用 `module` 函数来声明一个 Koin 模块。Koin 模块是我们定义所有要注入的组件的地方。",
      "lastUpdated": "2025-04-04T23:04:17.603Z"
    },
    "5dd16a29eec92fa395d9f413e80fc997": {
      "source": "```kotlin\nval appModule = module {\n    \n}\n```",
      "translation": "```kotlin\nval appModule = module {\n    \n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:18.030Z"
    },
    "43619e7bb610cb25751461af6f97f8c2": {
      "source": "Let's declare our first component. We want a singleton of `UserRepository`, by creating an instance of `UserRepositoryImpl`",
      "translation": "n\n让我们声明我们的第一个组件。我们想要一个`UserRepository`的单例，通过创建一个`UserRepositoryImpl`的实例来实现。",
      "lastUpdated": "2025-04-04T23:04:18.573Z"
    },
    "7dab502aa72287455e5b393882aec698": {
      "source": "```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n}\n```",
      "translation": "```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:19.007Z"
    },
    "7abd49e56aa3686c71f3a30206791023": {
      "source": "## The UserService Component",
      "translation": "n\n## UserService 组件",
      "lastUpdated": "2025-04-04T23:04:19.417Z"
    },
    "b1e73ef862ecee41047ce728e5bdd501": {
      "source": "Let's write the UserService component to request the default user:",
      "translation": "n\n让我们编写 UserService 组件来请求默认用户：",
      "lastUpdated": "2025-04-04T23:04:19.848Z"
    },
    "1ba267879f66e05fb7a6fce9d2f292ca": {
      "source": "```kotlin\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```",
      "translation": "```kotlin\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:20.370Z"
    },
    "274079e0f9f7be492796c7f5ee1b8c7b": {
      "source": "> UserRepository is referenced in UserPresenter`s constructor",
      "translation": "n\n> UserRepository 在 UserPresenter 的构造函数中被引用",
      "lastUpdated": "2025-04-04T23:04:20.808Z"
    },
    "899c55fc2872c69f0cd1dcf56795533f": {
      "source": "We declare `UserService` in our Koin module. We declare it as a `single` definition:",
      "translation": "n\n我们在 Koin 模块中声明 `UserService`。我们将其声明为 `single` 定义：",
      "lastUpdated": "2025-04-04T23:04:21.229Z"
    },
    "654ae01d694157a9dc45244cac5e7ae4": {
      "source": "```kotlin\nval appModule = module {\n     single<UserRepository> { UserRepositoryImpl() }\n     single { UserService(get()) }\n}\n```",
      "translation": "```kotlin\nval appModule = module {\n     single<UserRepository> { UserRepositoryImpl() }\n     single { UserService(get()) }\n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:21.697Z"
    },
    "93f3e4061d34bca9d5949232b68449ab": {
      "source": "> The `get()` function allow to ask Koin to resolve the needed dependency.",
      "translation": "n\n> `get()` 函数允许请求 Koin 解析所需的依赖。",
      "lastUpdated": "2025-04-04T23:04:22.115Z"
    },
    "37cab9a1c1ab2e8262c35ff82947112d": {
      "source": "## Injecting Dependencies in UserApplication",
      "translation": "n\n## 在 UserApplication 中注入依赖",
      "lastUpdated": "2025-04-04T23:04:22.515Z"
    },
    "a89138107d1a871d415a1073708799f9": {
      "source": "The `UserApplication` class will help bootstrap instances out of Koin. It will resolve the `UserService`, thanks to `KoinComponent` interface. This allows to inject it with the `by inject()` delegate function: ",
      "translation": "n\n`UserApplication` 类将帮助从 Koin 中引导实例。由于 `KoinComponent` 接口，它将解析 `UserService`。这允许使用 `by inject()` 委托函数注入它：",
      "lastUpdated": "2025-04-04T23:04:23.055Z"
    },
    "1be0b52b69ff5f46c44067ee7dd5a3a0": {
      "source": "```kotlin\nclass UserApplication : KoinComponent {\n\n    private val userService : UserService by inject()\n\n    // display our data\n    fun sayHello(){\n        val user = userService.getDefaultUser()\n        val message = \"Hello '$user'!\"\n        println(message)\n    }\n}\n```",
      "translation": "```kotlin\nclass UserApplication : KoinComponent {\n\n    private val userService : UserService by inject()\n\n    // 显示我们的数据\n    fun sayHello(){\n        val user = userService.getDefaultUser()\n        val message = \"Hello '$user'!\"\n        println(message)\n    }\n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:23.646Z"
    },
    "dc7c2cb18474827fb2ce8f06cd745c8b": {
      "source": "That's it, your app is ready.",
      "translation": "n\n就这样，你的应用就准备好了。",
      "lastUpdated": "2025-04-04T23:04:24.037Z"
    },
    "f62989858e5a74333e833ee7c5dba2eb": {
      "source": ":::info\nThe `by inject()` function allows us to retrieve Koin instances, in any class that extends `KoinComponent`\n:::",
      "translation": "n\n:::info\n`by inject()` 函数允许我们在任何继承自 `KoinComponent` 的类中检索 Koin 实例。\n:::",
      "lastUpdated": "2025-04-04T23:04:24.546Z"
    },
    "24ac468edb32500782678e7e794b0420": {
      "source": "## Start Koin",
      "translation": "n\n## 启动 Koin",
      "lastUpdated": "2025-04-04T23:04:24.911Z"
    },
    "aa8379335abf146ffe4a915af6927e29": {
      "source": "We need to start Koin with our application. Just call the `startKoin()` function in the application's main entry point, our `main` function:",
      "translation": "n\n我们需要用我们的应用程序启动 Koin。只需在应用程序的主入口点，也就是我们的 `main` 函数中调用 `startKoin()` 函数：",
      "lastUpdated": "2025-04-04T23:04:25.448Z"
    },
    "63855b94432cf93ab4a3c4b05618e4a7": {
      "source": "```kotlin\nfun main() {\n    startKoin {\n        modules(appModule)\n    }\n\n    UserApplication().sayHello()\n}\n```",
      "translation": "```kotlin\nfun main() {\n    startKoin {\n        modules(appModule)\n    }\n\n    UserApplication().sayHello()\n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:25.951Z"
    },
    "ed7d8b510e41ec22baf25c1b7789e471": {
      "source": ":::info\nThe `modules()` function in `startKoin` load the given list of modules\n:::",
      "translation": "n\n:::info\n`startKoin` 中的 `modules()` 函数用于加载给定的模块列表。\n:::",
      "lastUpdated": "2025-04-04T23:04:26.396Z"
    },
    "d80b61b0c15f98760bf6549f9c32e55e": {
      "source": "## Koin module: classic or constructor DSL?",
      "translation": "n\n## Koin 模块：经典 DSL 还是构造函数 DSL？",
      "lastUpdated": "2025-04-04T23:04:26.811Z"
    },
    "94acbb25044301043e0ba3140ef8870e": {
      "source": "Here is the Koin module declaration for our app:",
      "translation": "n\n这是我们应用的 Koin 模块声明：",
      "lastUpdated": "2025-04-04T23:04:27.207Z"
    },
    "f7718718a7e0cd998d8b3ad41868c348": {
      "source": "```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n    single { UserService(get()) }\n}\n```",
      "translation": "```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n    single { UserService(get()) }\n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:27.669Z"
    },
    "ca7c981a12c78e93ac836d0c350dce20": {
      "source": "We can write it in a more compact way, by using constructors:",
      "translation": "我们可以用更紧凑的方式来编写它，通过使用构造函数：\n",
      "lastUpdated": "2025-04-04T23:04:28.103Z"
    },
    "3d7beee46ab7edee6e1776956999d07d": {
      "source": "```kotlin\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```",
      "translation": "```kotlin\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:28.608Z"
    },
    "580cc99e5b3dcfd0d03b73410111cecb": {
      "source": "---\ntitle: Kotlin\n---\n\n> This tutorial lets you write a Kotlin application and use Koin dependency injection to retrieve your components.\n> You need around __10 min__ to do the tutorial.\n\n:::note\nupdate - 2024-10-21\n:::\n\n## Get the code\n\n:::info\n[The source code is available at on Github](https://github.com/InsertKoinIO/koin-getting-started/tree/main/kotlin)\n:::\n\n## Setup\n\nFirst, check that the `koin-core` dependency is added like below:\n\n```groovy\ndependencies {\n    \n    // Koin for Kotlin apps\n    compile \"io.insert-koin:koin-core:$koin_version\"\n}\n```\n\n## Application Overview\n\nThe idea of the application is to manage a list of users, and display it in our `UserApplication` class:\n\n> Users -> UserRepository -> UserService -> UserApplication\n\n## The \"User\" Data\n\nWe will manage a collection of Users. Here is the data class: \n\n```kotlin\ndata class User(val name : String)\n```\n\nWe create a \"Repository\" component to manage the list of users (add users or find one by name). Here below, the `UserRepository` interface and its implementation:\n\n```kotlin\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n## The Koin module\n\nUse the `module` function to declare a Koin module. A Koin module is the place where we define all our components to be injected.\n\n```kotlin\nval appModule = module {\n    \n}\n```\n\nLet's declare our first component. We want a singleton of `UserRepository`, by creating an instance of `UserRepositoryImpl`\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n}\n```\n\n## The UserService Component\n\nLet's write the UserService component to request the default user:\n\n```kotlin\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n\n> UserRepository is referenced in UserPresenter`s constructor\n\nWe declare `UserService` in our Koin module. We declare it as a `single` definition:\n\n```kotlin\nval appModule = module {\n     single<UserRepository> { UserRepositoryImpl() }\n     single { UserService(get()) }\n}\n```\n\n> The `get()` function allow to ask Koin to resolve the needed dependency.\n\n## Injecting Dependencies in UserApplication\n\nThe `UserApplication` class will help bootstrap instances out of Koin. It will resolve the `UserService`, thanks to `KoinComponent` interface. This allows to inject it with the `by inject()` delegate function: \n\n```kotlin\nclass UserApplication : KoinComponent {\n\n    private val userService : UserService by inject()\n\n    // display our data\n    fun sayHello(){\n        val user = userService.getDefaultUser()\n        val message = \"Hello '$user'!\"\n        println(message)\n    }\n}\n```\n\nThat's it, your app is ready.\n\n:::info\nThe `by inject()` function allows us to retrieve Koin instances, in any class that extends `KoinComponent`\n:::\n\n\n## Start Koin\n\nWe need to start Koin with our application. Just call the `startKoin()` function in the application's main entry point, our `main` function:\n\n```kotlin\nfun main() {\n    startKoin {\n        modules(appModule)\n    }\n\n    UserApplication().sayHello()\n}\n```\n\n:::info\nThe `modules()` function in `startKoin` load the given list of modules\n:::\n\n## Koin module: classic or constructor DSL?\n\nHere is the Koin module declaration for our app:\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n    single { UserService(get()) }\n}\n```\n\nWe can write it in a more compact way, by using constructors:\n\n```kotlin\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```\n",
      "translation": "---\ntitle: Kotlin\n---\n> 本教程将引导你编写一个 Kotlin 应用程序，并使用 Koin 依赖注入来检索你的组件。\n> 完成本教程大约需要 __10 分钟__。\n\nn\n:::note\n更新 - 2024-10-21\n:::\n\nn\n## 获取代码\n\nn\n:::info\n[源代码可在 Github 上找到](https://github.com/InsertKoinIO/koin-getting-started/tree/main/kotlin)\n:::\n\nn\n## 设置\n\nn\n首先，请检查是否已添加 `koin-core` 依赖项，如下所示：\n\n```groovy\ndependencies {\n    \n    // Koin for Kotlin apps\n    compile \"io.insert-koin:koin-core:$koin_version\"\n}\n```\n\nn\n## 应用概览\n\nn\n这个应用程序的目的是管理一个用户列表，并在我们的 `UserApplication` 类中显示它：\n\nn\n> 用户 -> UserRepository -> UserService -> UserApplication\n\nn\n## “用户”数据\n\n```markdown\n我们将管理一个 User 的集合。以下是数据类：\n```\n\n```kotlin\ndata class User(val name : String)\n```\n\nn\n我们创建一个 “Repository” 组件来管理用户列表（添加用户或按名称查找）。下面是 `UserRepository` 接口及其实现：\n\n```kotlin\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\nn\n## Koin 模块\n\nn\n使用 `module` 函数来声明一个 Koin 模块。Koin 模块是我们定义所有要注入的组件的地方。\n\n```kotlin\nval appModule = module {\n    \n}\n```\n\nn\n让我们声明我们的第一个组件。我们想要一个`UserRepository`的单例，通过创建一个`UserRepositoryImpl`的实例来实现。\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n}\n```\n\nn\n## UserService 组件\n\nn\n让我们编写 UserService 组件来请求默认用户：\n\n```kotlin\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n\nn\n> UserRepository 在 UserPresenter 的构造函数中被引用\n\nn\n我们在 Koin 模块中声明 `UserService`。我们将其声明为 `single` 定义：\n\n```kotlin\nval appModule = module {\n     single<UserRepository> { UserRepositoryImpl() }\n     single { UserService(get()) }\n}\n```\n\nn\n> `get()` 函数允许请求 Koin 解析所需的依赖。\n\nn\n## 在 UserApplication 中注入依赖\n\nn\n`UserApplication` 类将帮助从 Koin 中引导实例。由于 `KoinComponent` 接口，它将解析 `UserService`。这允许使用 `by inject()` 委托函数注入它：\n\n```kotlin\nclass UserApplication : KoinComponent {\n\n    private val userService : UserService by inject()\n\n    // 显示我们的数据\n    fun sayHello(){\n        val user = userService.getDefaultUser()\n        val message = \"Hello '$user'!\"\n        println(message)\n    }\n}\n```\n\nn\n就这样，你的应用就准备好了。\n\nn\n:::info\n`by inject()` 函数允许我们在任何继承自 `KoinComponent` 的类中检索 Koin 实例。\n:::\n\nn\n## 启动 Koin\n\nn\n我们需要用我们的应用程序启动 Koin。只需在应用程序的主入口点，也就是我们的 `main` 函数中调用 `startKoin()` 函数：\n\n```kotlin\nfun main() {\n    startKoin {\n        modules(appModule)\n    }\n\n    UserApplication().sayHello()\n}\n```\n\nn\n:::info\n`startKoin` 中的 `modules()` 函数用于加载给定的模块列表。\n:::\n\nn\n## Koin 模块：经典 DSL 还是构造函数 DSL？\n\nn\n这是我们应用的 Koin 模块声明：\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n    single { UserService(get()) }\n}\n```\n\n我们可以用更紧凑的方式来编写它，通过使用构造函数：\n\n```kotlin\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```\n",
      "lastUpdated": "2025-04-04T23:04:28.608Z"
    }
  }
}