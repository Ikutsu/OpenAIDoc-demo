{
  "zh-CN": {
    "580cc99e5b3dcfd0d03b73410111cecb": {
      "source": "---\ntitle: Kotlin\n---\n\n> This tutorial lets you write a Kotlin application and use Koin dependency injection to retrieve your components.\n> You need around __10 min__ to do the tutorial.\n\n:::note\nupdate - 2024-10-21\n:::\n\n## Get the code\n\n:::info\n[The source code is available at on Github](https://github.com/InsertKoinIO/koin-getting-started/tree/main/kotlin)\n:::\n\n## Setup\n\nFirst, check that the `koin-core` dependency is added like below:\n\n```groovy\ndependencies {\n    \n    // Koin for Kotlin apps\n    compile \"io.insert-koin:koin-core:$koin_version\"\n}\n```\n\n## Application Overview\n\nThe idea of the application is to manage a list of users, and display it in our `UserApplication` class:\n\n> Users -> UserRepository -> UserService -> UserApplication\n\n## The \"User\" Data\n\nWe will manage a collection of Users. Here is the data class: \n\n```kotlin\ndata class User(val name : String)\n```\n\nWe create a \"Repository\" component to manage the list of users (add users or find one by name). Here below, the `UserRepository` interface and its implementation:\n\n```kotlin\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n## The Koin module\n\nUse the `module` function to declare a Koin module. A Koin module is the place where we define all our components to be injected.\n\n```kotlin\nval appModule = module {\n    \n}\n```\n\nLet's declare our first component. We want a singleton of `UserRepository`, by creating an instance of `UserRepositoryImpl`\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n}\n```\n\n## The UserService Component\n\nLet's write the UserService component to request the default user:\n\n```kotlin\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n\n> UserRepository is referenced in UserPresenter`s constructor\n\nWe declare `UserService` in our Koin module. We declare it as a `single` definition:\n\n```kotlin\nval appModule = module {\n     single<UserRepository> { UserRepositoryImpl() }\n     single { UserService(get()) }\n}\n```\n\n> The `get()` function allow to ask Koin to resolve the needed dependency.\n\n## Injecting Dependencies in UserApplication\n\nThe `UserApplication` class will help bootstrap instances out of Koin. It will resolve the `UserService`, thanks to `KoinComponent` interface. This allows to inject it with the `by inject()` delegate function: \n\n```kotlin\nclass UserApplication : KoinComponent {\n\n    private val userService : UserService by inject()\n\n    // display our data\n    fun sayHello(){\n        val user = userService.getDefaultUser()\n        val message = \"Hello '$user'!\"\n        println(message)\n    }\n}\n```\n\nThat's it, your app is ready.\n\n:::info\nThe `by inject()` function allows us to retrieve Koin instances, in any class that extends `KoinComponent`\n:::\n\n\n## Start Koin\n\nWe need to start Koin with our application. Just call the `startKoin()` function in the application's main entry point, our `main` function:\n\n```kotlin\nfun main() {\n    startKoin {\n        modules(appModule)\n    }\n\n    UserApplication().sayHello()\n}\n```\n\n:::info\nThe `modules()` function in `startKoin` load the given list of modules\n:::\n\n## Koin module: classic or constructor DSL?\n\nHere is the Koin module declaration for our app:\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n    single { UserService(get()) }\n}\n```\n\nWe can write it in a more compact way, by using constructors:\n\n```kotlin\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```\n",
      "translation": "---\ntitle: Kotlin\n---\n> This tutorial lets you write a Kotlin application and use Koin dependency injection to retrieve your components.\n> You need around __10 min__ to do the tutorial.\n\n:::note\nupdate - 2024-10-21\n:::\n\n## Get the code\n\n:::info\n[The source code is available at on Github](https://github.com/InsertKoinIO/koin-getting-started/tree/main/kotlin)\n:::\n\n## Setup\n\nFirst, check that the `koin-core` dependency is added like below:\n\n```groovy\ndependencies {\n    \n    // Koin for Kotlin apps\n    compile \"io.insert-koin:koin-core:$koin_version\"\n}\n```\n\n## Application Overview\n\nThe idea of the application is to manage a list of users, and display it in our `UserApplication` class:\n\n> Users -> UserRepository -> UserService -> UserApplication\n\n## The \"User\" Data\n\nWe will manage a collection of Users. Here is the data class: \n\n```kotlin\ndata class User(val name : String)\n```\n\nWe create a \"Repository\" component to manage the list of users (add users or find one by name). Here below, the `UserRepository` interface and its implementation:\n\n```kotlin\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n## The Koin module\n\nUse the `module` function to declare a Koin module. A Koin module is the place where we define all our components to be injected.\n\n```kotlin\nval appModule = module {\n    \n}\n```\n\nLet's declare our first component. We want a singleton of `UserRepository`, by creating an instance of `UserRepositoryImpl`\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n}\n```\n\n## The UserService Component\n\nLet's write the UserService component to request the default user:\n\n```kotlin\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n\n> UserRepository is referenced in UserPresenter`s constructor\n\nWe declare `UserService` in our Koin module. We declare it as a `single` definition:\n\n```kotlin\nval appModule = module {\n     single<UserRepository> { UserRepositoryImpl() }\n     single { UserService(get()) }\n}\n```\n\n> The `get()` function allow to ask Koin to resolve the needed dependency.\n\n## Injecting Dependencies in UserApplication\n\nThe `UserApplication` class will help bootstrap instances out of Koin. It will resolve the `UserService`, thanks to `KoinComponent` interface. This allows to inject it with the `by inject()` delegate function: \n\n```kotlin\nclass UserApplication : KoinComponent {\n\n    private val userService : UserService by inject()\n\n    // display our data\n    fun sayHello(){\n        val user = userService.getDefaultUser()\n        val message = \"Hello '$user'!\"\n        println(message)\n    }\n}\n```\n\nThat's it, your app is ready.\n\n:::info\nThe `by inject()` function allows us to retrieve Koin instances, in any class that extends `KoinComponent`\n:::\n\n## Start Koin\n\nWe need to start Koin with our application. Just call the `startKoin()` function in the application's main entry point, our `main` function:\n\n```kotlin\nfun main() {\n    startKoin {\n        modules(appModule)\n    }\n\n    UserApplication().sayHello()\n}\n```\n\n:::info\nThe `modules()` function in `startKoin` load the given list of modules\n:::\n\n## Koin module: classic or constructor DSL?\n\nHere is the Koin module declaration for our app:\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n    single { UserService(get()) }\n}\n```\n\nWe can write it in a more compact way, by using constructors:\n\n```kotlin\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```",
      "lastUpdated": "2025-04-04T22:52:59.978Z"
    }
  }
}