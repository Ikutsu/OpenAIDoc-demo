{
  "zh-CN": {
    "d0a5346797911ff4212aeac380cd528e": {
      "source": "---\ntitle: Koin Annotations\n---\n\nSetup Koin Annotations for your project \n\n## Version\n\nYou can find all Koin packages on [maven central](https://search.maven.org/search?q=io.insert-koin).\n\nHere are the current available versions:\n\n## Setup & Current Version\n\nHere are the current available Koin projects versions:\n\n| Project   |      Version      |\n|----------|:-------------:|\n| koin-annotations-bom |  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-annotations-bom)](https://mvnrepository.com/artifact/io.insert-koin/koin-annotations-bom) |\n| koin-annotations |  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-annotations)](https://mvnrepository.com/artifact/io.insert-koin/koin-annotations) |\n| koin-ksp-compiler |  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-ksp-compiler)](https://mvnrepository.com/artifact/io.insert-koin/koin-ksp-compiler) |\n\n\n## KSP Plugin\n\nWe need KSP Plugin to work (https://github.com/google/ksp). Follow the official (KSP Setup documentation)[https://kotlinlang.org/docs/ksp-quickstart.html]\n\nJust add the Gradle plugin:\n```groovy\nplugins {\n    id \"com.google.devtools.ksp\" version \"$ksp_version\"\n}\n```\n\nLatest KSP compatible version: `1.9.24-1.0.20`\n\n## Kotlin & Multiplatform\n\nIn a standard Kotlin/Kotlin Multiplatform project, you need to setup KSP as follow:\n\n- use KSP Gradle plugin\n- add dependency in commonMain for koin annotations\n- set sourceSet for commonMain\n- add KSP dependencies tasks with koin compiler\n- setup compilation task dependency to `kspCommonMainKotlinMetadata`\n\n```groovy\nplugins {\n   id(\"com.google.devtools.ksp\")\n}\n\n\nkotlin {\n\n    sourceSets {\n        \n        // Add Koin Annotations\n        commonMain.dependencies {\n            // Koin\n            implementation(\"io.insert-koin:koin-core:$koin_version\")\n            // Koin Annotations\n            api(\"io.insert-koin:koin-annotations:$koin_annotations_version\")\n        }\n    }\n    \n    // KSP Common sourceSet\n    sourceSets.named(\"commonMain\").configure {\n        kotlin.srcDir(\"build/generated/ksp/metadata/commonMain/kotlin\")\n    }       \n}\n\n// KSP Tasks\ndependencies {\n    add(\"kspCommonMainMetadata\", libs.koin.ksp.compiler)\n    add(\"kspAndroid\", libs.koin.ksp.compiler)\n    add(\"kspIosX64\", libs.koin.ksp.compiler)\n    add(\"kspIosArm64\", libs.koin.ksp.compiler)\n    add(\"kspIosSimulatorArm64\", libs.koin.ksp.compiler)\n}\n\n// Trigger Common Metadata Generation from Native tasks\nproject.tasks.withType(KotlinCompilationTask::class.java).configureEach {\n    if(name != \"kspCommonMainKotlinMetadata\") {\n        dependsOn(\"kspCommonMainKotlinMetadata\")\n    }\n}\n\n```\n\n## Android App Setup\n\n- use KSP Gradle plugin\n- add dependency for koin annotations and koin ksp compiler\n- set sourceSet\n\n```groovy\nplugins {\n   id(\"com.google.devtools.ksp\")\n}\n\n\nandroid {\n\n    dependencies {\n        // Koin\n        implementation(\"io.insert-koin:koin-android:$koin_version\")\n        // Koin Annotations\n        implementation(\"io.insert-koin:koin-annotations:$koin_annotations_version\")\n        // Koin Annotations KSP Compiler\n        ksp(\"io.insert-koin:koin-ksp-compiler:$koin_annotations_version\")\n    }\n\n    // Set KSP sourceSet\n    applicationVariants.all {\n        val variantName = name\n        sourceSets {\n            getByName(\"main\") {\n                java.srcDir(File(\"build/generated/ksp/$variantName/kotlin\"))\n            }\n        }\n    }\n}\n\n```\n",
      "translation": "---\ntitle: Koin Annotations\n---\n```markdown\n为你的项目设置 Koin 注解\n\n## 版本\n\n你可以在 [maven central](https://search.maven.org/search?q=io.insert-koin) 上找到所有的 Koin 包。\n\n以下是当前可用的版本：\n\n## 设置 & 当前版本\n\n以下是当前可用的 Koin 项目版本：\n\n| 项目   |      版本      |\n|----------|:-------------:|\n| koin-annotations-bom |  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-annotations-bom)](https://mvnrepository.com/artifact/io.insert-koin/koin-annotations-bom) |\n| koin-annotations |  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-annotations)](https://mvnrepository.com/artifact/io.insert-koin/koin-annotations) |\n| koin-ksp-compiler |  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-ksp-compiler)](https://mvnrepository.com/artifact/io.insert-koin/koin-ksp-compiler) |\n\n\n## KSP 插件\n\n我们需要 KSP 插件来工作 (https://github.com/google/ksp)。请遵循官方的 (KSP 设置文档)[https://kotlinlang.org/docs/ksp-quickstart.html]\n\n只需添加 Gradle 插件：\n```groovy\nplugins {\n    id \"com.google.devtools.ksp\" version \"$ksp_version\"\n}\n```\n\n最新的 KSP 兼容版本：`1.9.24-1.0.20`\n\n## Kotlin & 多平台\n\n在一个标准的 Kotlin/Kotlin 多平台项目中，你需要如下设置 KSP：\n\n- 使用 KSP Gradle 插件\n- 在 commonMain 中添加 koin annotations 的依赖\n- 为 commonMain 设置 sourceSet\n- 添加带有 koin compiler 的 KSP 依赖任务\n- 设置编译任务依赖于 `kspCommonMainKotlinMetadata`\n\n```groovy\nplugins {\n   id(\"com.google.devtools.ksp\")\n}\n\n\nkotlin {\n\n    sourceSets {\n        \n        // Add Koin Annotations\n        commonMain.dependencies {\n            // Koin\n            implementation(\"io.insert-koin:koin-core:$koin_version\")\n            // Koin Annotations\n            api(\"io.insert-koin:koin-annotations:$koin_annotations_version\")\n        }\n    }\n    \n    // KSP Common sourceSet\n    sourceSets.named(\"commonMain\").configure {\n        kotlin.srcDir(\"build/generated/ksp/metadata/commonMain/kotlin\")\n    }       \n}\n\n// KSP Tasks\ndependencies {\n    add(\"kspCommonMainMetadata\", libs.koin.ksp.compiler)\n    add(\"kspAndroid\", libs.koin.ksp.compiler)\n    add(\"kspIosX64\", libs.koin.ksp.compiler)\n    add(\"kspIosArm64\", libs.koin.ksp.compiler)\n    add(\"kspIosSimulatorArm64\", libs.koin.ksp.compiler)\n}\n\n// Trigger Common Metadata Generation from Native tasks\nproject.tasks.withType(KotlinCompilationTask::class.java).configureEach {\n    if(name != \"kspCommonMainKotlinMetadata\") {\n        dependsOn(\"kspCommonMainKotlinMetadata\")\n    }\n}\n\n```\n\n## Android 应用设置\n\n- 使用 KSP Gradle 插件\n- 添加 koin annotations 和 koin ksp compiler 的依赖\n- 设置 sourceSet\n\n```groovy\nplugins {\n   id(\"com.google.devtools.ksp\")\n}\n\n\nandroid {\n\n    dependencies {\n        // Koin\n        implementation(\"io.insert-koin:koin-android:$koin_version\")\n        // Koin Annotations\n        implementation(\"io.insert-koin:koin-annotations:$koin_annotations_version\")\n        // Koin Annotations KSP Compiler\n        ksp(\"io.insert-koin:koin-ksp-compiler:$koin_annotations_version\")\n    }\n\n    // Set KSP sourceSet\n    applicationVariants.all {\n        val variantName = name\n        sourceSets {\n            getByName(\"main\") {\n                java.srcDir(File(\"build/generated/ksp/$variantName/kotlin\"))\n            }\n        }\n    }\n}\n\n```\n",
      "lastUpdated": "2025-04-03T12:40:31.654Z"
    },
    "e16a4a4f7d49088423b90309a04f0b9f": {
      "source": "---\ntitle: Koin\n---\n\nAll you need to setting up Koin in your project\n\n## Current Versions\n\nYou can find all Koin packages on [maven central](https://search.maven.org/search?q=io.insert-koin).\n\nHere are the currently available versions:\n\n| Project                          |                                                                                                      Version                                                                                                       |\n|----------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| koin-bom                         |                                   [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-bom)](https://mvnrepository.com/artifact/io.insert-koin/koin-bom)                                   |\n| koin-core                        |                                  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-core)](https://mvnrepository.com/artifact/io.insert-koin/koin-core)                                  |\n| koin-core-viewmodel              |                        [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-core-viewmodel)](https://mvnrepository.com/artifact/io.insert-koin/koin-core-viewmodel)                        |\n| koin-core-viewmodel-navigation |             [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-core-viewmodel-navigation)](https://mvnrepository.com/artifact/io.insert-koin/koin-core-viewmodel-navigation)             |\n| koin-core-coroutines             |                       [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-core-coroutines)](https://mvnrepository.com/artifact/io.insert-koin/koin-core-coroutines)                       |\n| koin-test                        |                                  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-test)](https://mvnrepository.com/artifact/io.insert-koin/koin-test)                                  |\n| koin-test-junit4                 |                           [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-test-junit4)](https://mvnrepository.com/artifact/io.insert-koin/koin-test-junit4)                           |\n| koin-test-junit5                  |                   [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-test-junit5)](https://mvnrepository.com/artifact/io.insert-koin/koin-test-junit5)                                   |\n| koin-android                     |                               [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-android)](https://mvnrepository.com/artifact/io.insert-koin/koin-android)                               |\n| koin-android-test                |                          [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-android-test)](https://mvnrepository.com/artifact/io.insert-koin/koin-android-test)                          |\n| koin-android-compat              |                        [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-android-compat)](https://mvnrepository.com/artifact/io.insert-koin/koin-android-compat)                        |\n| koin-androidx-navigation         |                   [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-navigation)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-navigation)                   |\n| koin-androidx-workmanager        |                  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-workmanager)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-workmanager)                  |\n| koin-androidx-startup        |                      [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-startup)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-startup)                      |\n| koin-compose                     |                               [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-compose)](https://mvnrepository.com/artifact/io.insert-koin/koin-compose)                               |\n| koin-compose-viewmodel           |                     [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-compose-viewmodel)](https://mvnrepository.com/artifact/io.insert-koin/koin-compose-viewmodel)                     |\n| koin-compose-viewmodel-navigation|          [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-compose-viewmodel-navigation)](https://mvnrepository.com/artifact/io.insert-koin/koin-compose-viewmodel-navigation)          |\n| koin-androidx-compose            |                      [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-compose)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-compose)                      |\n| koin-androidx-compose-navigation |           [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-compose-navigation)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-compose-navigation)           |\n| koin-ktor                        |                                  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-ktor)](https://mvnrepository.com/artifact/io.insert-koin/koin-ktor)                                  |\n| koin-logger-slf4j                |                          [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-logger-slf4j)](https://mvnrepository.com/artifact/io.insert-koin/koin-logger-slf4j)                          |\n\n## Gradle Setup\n\n### Kotlin\n\nStarting from 3.5.0 you can use BOM-version to manage all Koin library versions. When using the BOM in your app, you don't need to add any version to the Koin library dependencies themselves. When you update the BOM version, all the libraries that you're using are automatically updated to their new versions.\n\nAdd `koin-bom` BOM and `koin-core` dependency to your application: \n```kotlin\nimplementation(project.dependencies.platform(\"io.insert-koin:koin-bom:$koin_version\"))\nimplementation(\"io.insert-koin:koin-core\")\n```\nIf you are using version catalogs:\n```toml\n[versions]\nkoin-bom = \"x.x.x\"\n...\n\n[libraries]\nkoin-bom = { module = \"io.insert-koin:koin-bom\", version.ref = \"koin-bom\" }\nkoin-core = { module = \"io.insert-koin:koin-core\" }\n...\n```\n```kotlin\ndependencies {\n    implementation(project.dependencies.platform(libs.koin.bom))\n    implementation(libs.koin.core)\n}\n```\n\nOr use an old way of specifying the exact dependency version for Koin:\n```kotlin\ndependencies {\n    implementation(\"io.insert-koin:koin-core:$koin_version\")\n}\n```\n\nYou are now ready to start Koin:\n\n```kotlin\nfun main() {\n    startKoin {\n        modules(...)\n    }\n}\n```\n\nIf you need testing capacity:\n\n```groovy\ndependencies {\n    // Koin Test features\n    testImplementation(\"io.insert-koin:koin-test:$koin_version\")\n    // Koin for JUnit 4\n    testImplementation(\"io.insert-koin:koin-test-junit4:$koin_version\")\n    // Koin for JUnit 5\n    testImplementation(\"io.insert-koin:koin-test-junit5:$koin_version\")\n}\n```\n\n:::info\nFrom now you can continue on Koin Tutorials to learn about using Koin: [Kotlin App Tutorial](/docs/quickstart/kotlin)\n:::\n\n### **Android**\n\nAdd `koin-android` dependency to your Android application:\n\n```groovy\ndependencies {\n    implementation(\"io.insert-koin:koin-android:$koin_android_version\")\n}\n```\n\nYou are now ready to start Koin in your `Application` class:\n\n```kotlin\nclass MainApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        \n        startKoin {\n            modules(appModule)\n        }\n    }\n}\n```\n\nIf you need extra features, add the following needed package:\n\n```groovy\ndependencies {\n    // Java Compatibility\n    implementation(\"io.insert-koin:koin-android-compat:$koin_android_version\")\n    // Jetpack WorkManager\n    implementation(\"io.insert-koin:koin-androidx-workmanager:$koin_android_version\")\n    // Navigation Graph\n    implementation(\"io.insert-koin:koin-androidx-navigation:$koin_android_version\")\n    // App Startup\n    implementation(\"io.insert-koin:koin-androidx-startup:$koin_android_version\")\n}\n```\n\n:::info\nFrom now you can continue on Koin Tutorials to learn about using Koin: [Android App Tutorial](/docs/quickstart/android-viewmodel)\n:::\n\n### **Jetpack Compose or Compose Multiplatform**\n\nAdd `koin-compose` dependency to your multiplatform application, for use Koin & Compose API:\n\n```groovy\ndependencies {\n    implementation(\"io.insert-koin:koin-compose:$koin_version\")\n    implementation(\"io.insert-koin:koin-compose-viewmodel:$koin_version\")\n    implementation(\"io.insert-koin:koin-compose-viewmodel-navigation:$koin_version\")\n}\n```\n\nIf you are using pure Android Jetpack Compose, you can go with\n\n```groovy\ndependencies {\n    implementation(\"io.insert-koin:koin-androidx-compose:$koin_version\")\n    implementation(\"io.insert-koin:koin-androidx-compose-navigation:$koin_version\")\n}\n```\n\n### **Kotlin Multiplatform**\n\nAdd `koin-core` dependency to your multiplatform application, for shared Kotlin part:\n\n```groovy\ndependencies {\n    implementation(\"io.insert-koin:koin-core:$koin_version\")\n}\n```\n\n:::info\nFrom now you can continue on Koin Tutorials to learn about using Koin: [Kotlin Multiplatform App Tutorial](/docs/quickstart/kmp)\n:::\n\n### **Ktor**\n\nAdd `koin-ktor` dependency to your Ktor application:\n\n```groovy\ndependencies {\n    // Koin for Ktor \n    implementation(\"io.insert-koin:koin-ktor:$koin_ktor\")\n    // SLF4J Logger\n    implementation(\"io.insert-koin:koin-logger-slf4j:$koin_ktor\")\n}\n```\n\nYou are now ready to install Koin feature into your Ktor application:\n\n```kotlin\nfun Application.main() {\n    install(Koin) {\n        slf4jLogger()\n        modules(appModule)\n    }\n}\n```\n\n:::info\nFrom now you can continue on Koin Tutorials to learn about using Koin: [Ktor App Tutorial](/docs/quickstart/ktor)\n:::\n\n\n### **Koin BOM**\nThe Koin Bill of Materials (BOM) lets you manage all of your Koin library versions by specifying only the BOM’s version. The BOM itself has links to the stable versions of the different Koin libraries, in such a way that they work well together. When using the BOM in your app, you don't need to add any version to the Koin library dependencies themselves. When you update the BOM version, all the libraries that you're using are automatically updated to their new versions.\n\n```groovy\ndependencies {\n    // Declare koin-bom version\n    implementation platform(\"io.insert-koin:koin-bom:$koin_bom\")\n    \n    // Declare the koin dependencies that you need\n    implementation(\"io.insert-koin:koin-android\")\n    implementation(\"io.insert-koin:koin-core-coroutines\")\n    implementation(\"io.insert-koin:koin-androidx-workmanager\")\n    \n    // If you need specify some version it's just point to desired version\n    implementation(\"io.insert-koin:koin-androidx-navigation:1.2.3-alpha03\")\n    \n    // Works with test libraries too!\n    testImplementation(\"io.insert-koin:koin-test-junit4\")\n    testImplementation(\"io.insert-koin:koin-android-test\")\n}\n```\n",
      "translation": "---\ntitle: Koin\n---\n在你的项目中设置 Koin 所需的一切\n\n## 当前版本\n\n你可以在 [maven central](https://search.maven.org/search?q=io.insert-koin) 上找到所有 Koin 包。\n\n以下是当前可用的版本：\n\n| Project                          |                                                                                                      Version                                                                                                       |\n|----------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| koin-bom                         |                                   [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-bom)](https://mvnrepository.com/artifact/io.insert-koin/koin-bom)                                   |\n| koin-core                        |                                  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-core)](https://mvnrepository.com/artifact/io.insert-koin/koin-core)                                  |\n| koin-core-viewmodel              |                        [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-core-viewmodel)](https://mvnrepository.com/artifact/io.insert-koin/koin-core-viewmodel)                        |\n| koin-core-viewmodel-navigation |             [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-core-viewmodel-navigation)](https://mvnrepository.com/artifact/io.insert-koin/koin-core-viewmodel-navigation)             |\n| koin-core-coroutines             |                       [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-core-coroutines)](https://mvnrepository.com/artifact/io.insert-koin/koin-core-coroutines)                       |\n| koin-test                        |                                  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-test)](https://mvnrepository.com/artifact/io.insert-koin/koin-test)                                  |\n| koin-test-junit4                 |                           [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-test-junit4)](https://mvnrepository.com/artifact/io.insert-koin/koin-test-junit4)                           |\n| koin-test-junit5                  |                   [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-test-junit5)](https://mvnrepository.com/artifact/io.insert-koin/koin-test-junit5)                                   |\n| koin-android                     |                               [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-android)](https://mvnrepository.com/artifact/io.insert-koin/koin-android)                               |\n| koin-android-test                |                          [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-android-test)](https://mvnrepository.com/artifact/io.insert-koin/koin-android-test)                          |\n| koin-android-compat              |                        [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-android-compat)](https://mvnrepository.com/artifact/io.insert-koin/koin-android-compat)                        |\n| koin-androidx-navigation         |                   [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-navigation)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-navigation)                   |\n| koin-androidx-workmanager        |                  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-workmanager)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-workmanager)                  |\n| koin-androidx-startup        |                      [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-startup)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-startup)                      |\n| koin-compose                     |                               [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-compose)](https://mvnrepository.com/artifact/io.insert-koin/koin-compose)                               |\n| koin-compose-viewmodel           |                     [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-compose-viewmodel)](https://mvnrepository.com/artifact/io.insert-koin/koin-compose-viewmodel)                     |\n| koin-compose-viewmodel-navigation|          [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-compose-viewmodel-navigation)](https://mvnrepository.com/artifact/io.insert-koin/koin-compose-viewmodel-navigation)          |\n| koin-androidx-compose            |                      [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-compose)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-compose)                      |\n| koin-androidx-compose-navigation |           [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-androidx-compose-navigation)](https://mvnrepository.com/artifact/io.insert-koin/koin-androidx-compose-navigation)           |\n| koin-ktor                        |                                  [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-ktor)](https://mvnrepository.com/artifact/io.insert-koin/koin-ktor)                                  |\n| koin-logger-slf4j                |                          [![Maven Central](https://img.shields.io/maven-central/v/io.insert-koin/koin-logger-slf4j)](https://mvnrepository.com/artifact/io.insert-koin/koin-logger-slf4j)                          |\n\n## Gradle 设置\n\n### Kotlin\n\n从 3.5.0 开始，你可以使用 BOM 版本来管理所有 Koin 库的版本。在你的应用中使用 BOM 时，你不需要向 Koin 库依赖项本身添加任何版本。当你更新 BOM 版本时，你正在使用的所有库都会自动更新到它们的新版本。\n\n将 `koin-bom` BOM 和 `koin-core` 依赖项添加到你的应用程序：\n```kotlin\nimplementation(project.dependencies.platform(\"io.insert-koin:koin-bom:$koin_version\"))\nimplementation(\"io.insert-koin:koin-core\")\n```\n如果你正在使用 version catalogs:\n```toml\n[versions]\nkoin-bom = \"x.x.x\"\n...\n\n[libraries]\nkoin-bom = { module = \"io.insert-koin:koin-bom\", version.ref = \"koin-bom\" }\nkoin-core = { module = \"io.insert-koin:koin-core\" }\n...\n```\n```kotlin\ndependencies {\n    implementation(project.dependencies.platform(libs.koin.bom))\n    implementation(libs.koin.core)\n}\n```\n\n或者使用旧的方式来指定 Koin 的确切依赖版本：\n```kotlin\ndependencies {\n    implementation(\"io.insert-koin:koin-core:$koin_version\")\n}\n```\n\n现在你可以启动 Koin 了：\n\n```kotlin\nfun main() {\n    startKoin {\n        modules(...)\n    }\n}\n```\n\n如果你需要测试功能：\n\n```groovy\ndependencies {\n    // Koin Test features\n    testImplementation(\"io.insert-koin:koin-test:$koin_version\")\n    // Koin for JUnit 4\n    testImplementation(\"io.insert-koin:koin-test-junit4:$koin_version\")\n    // Koin for JUnit 5\n    testImplementation(\"io.insert-koin:koin-test-junit5:$koin_version\")\n}\n```\n\n:::info\n从现在开始，你可以继续学习 Koin 教程，了解如何使用 Koin：[Kotlin App Tutorial](/docs/quickstart/kotlin)\n:::\n\n### **Android**\n\n将 `koin-android` 依赖项添加到你的 Android 应用程序：\n\n```groovy\ndependencies {\n    implementation(\"io.insert-koin:koin-android:$koin_android_version\")\n}\n```\n\n现在你可以在你的 `Application` 类中启动 Koin 了：\n\n```kotlin\nclass MainApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        \n        startKoin {\n            modules(appModule)\n        }\n    }\n}\n```\n\n如果你需要额外的功能，添加以下需要的包：\n\n```groovy\ndependencies {\n    // Java Compatibility\n    implementation(\"io.insert-koin:koin-android-compat:$koin_android_version\")\n    // Jetpack WorkManager\n    implementation(\"io.insert-koin:koin-androidx-workmanager:$koin_android_version\")\n    // Navigation Graph\n    implementation(\"io.insert-koin:koin-androidx-navigation:$koin_android_version\")\n    // App Startup\n    implementation(\"io.insert-koin:koin-androidx-startup:$koin_android_version\")\n}\n```\n\n:::info\n从现在开始，你可以继续学习 Koin 教程，了解如何使用 Koin：[Android App Tutorial](/docs/quickstart/android-viewmodel)\n:::\n\n### **Jetpack Compose or Compose Multiplatform**\n\n将 `koin-compose` 依赖项添加到你的 multiplatform 应用程序，以使用 Koin & Compose API：\n\n```groovy\ndependencies {\n    implementation(\"io.insert-koin:koin-compose:$koin_version\")\n    implementation(\"io.insert-koin:koin-compose-viewmodel:$koin_version\")\n    implementation(\"io.insert-koin:koin-compose-viewmodel-navigation:$koin_version\")\n}\n```\n\n如果你正在使用纯 Android Jetpack Compose，你可以使用\n\n```groovy\ndependencies {\n    implementation(\"io.insert-koin:koin-androidx-compose:$koin_version\")\n    implementation(\"io.insert-koin:koin-androidx-compose-navigation:$koin_version\")\n}\n```\n\n### **Kotlin Multiplatform**\n\n将 `koin-core` 依赖项添加到你的 multiplatform 应用程序，用于共享的 Kotlin 部分：\n\n```groovy\ndependencies {\n    implementation(\"io.insert-koin:koin-core:$koin_version\")\n}\n```\n\n:::info\n从现在开始，你可以继续学习 Koin 教程，了解如何使用 Koin：[Kotlin Multiplatform App Tutorial](/docs/quickstart/kmp)\n:::\n\n### **Ktor**\n\n将 `koin-ktor` 依赖项添加到你的 Ktor 应用程序：\n\n```groovy\ndependencies {\n    // Koin for Ktor \n    implementation(\"io.insert-koin:koin-ktor:$koin_ktor\")\n    // SLF4J Logger\n    implementation(\"io.insert-koin:koin-logger-slf4j:$koin_ktor\")\n}\n```\n\n现在你可以将 Koin feature 安装到你的 Ktor 应用程序中：\n\n```kotlin\nfun Application.main() {\n    install(Koin) {\n        slf4jLogger()\n        modules(appModule)\n    }\n}\n```\n\n:::info\n从现在开始，你可以继续学习 Koin 教程，了解如何使用 Koin：[Ktor App Tutorial](/docs/quickstart/ktor)\n:::\n\n\n### **Koin BOM**\nKoin Bill of Materials (BOM) 允许你仅通过指定 BOM 的版本来管理所有 Koin 库的版本。BOM 本身具有指向不同 Koin 库的稳定版本的链接，以便它们可以很好地协同工作。在你的应用中使用 BOM 时，你不需要向 Koin 库依赖项本身添加任何版本。当你更新 BOM 版本时，你正在使用的所有库都会自动更新到它们的新版本。\n\n```groovy\ndependencies {\n    // Declare koin-bom version\n    implementation platform(\"io.insert-koin:koin-bom:$koin_bom\")\n    \n    // Declare the koin dependencies that you need\n    implementation(\"io.insert-koin:koin-android\")\n    implementation(\"io.insert-koin:koin-core-coroutines\")\n    implementation(\"io.insert-koin:koin-androidx-workmanager\")\n    \n    // If you need specify some version it's just point to desired version\n    implementation(\"io.insert-koin:koin-androidx-navigation:1.2.3-alpha03\")\n    \n    // Works with test libraries too!\n    testImplementation(\"io.insert-koin:koin-test-junit4\")\n    testImplementation(\"io.insert-koin:koin-android-test\")\n}\n```\n",
      "lastUpdated": "2025-04-03T12:40:45.448Z"
    },
    "65c39c363c1f1df2b722c12a5d1e517a": {
      "source": "---\ntitle: Migration Guides (Deprecated)\n---\n\nFollow new [Releases Guide](../support/releases.md) to help your migration process\n\n",
      "translation": "---\ntitle: Migration Guides (Deprecated)\n---\n遵循新的[发布指南](../support/releases.md)来帮助你的迁移过程\n",
      "lastUpdated": "2025-04-03T12:40:45.856Z"
    },
    "5c939153eeea1c7f93291cf1e264e9fc": {
      "source": "---\ntitle: Why Koin?\n---\n\nKoin provides an easy and efficient way to incorporate dependency injection into any Kotlin application(Multiplatform, Android, backend ...)\n\nThe goals of Koin are:\n- Simplify your Dependency Injection infrastructure with smart API\n- Kotlin DSL easy to read, easy to use, to let you write any kind of application \n- Provides different kind of integration from Android ecosystem, to more backend needs like Ktor\n- Allow to be used with annotations \n\n## Koin in a nutshell\n\n### Making your Kotlin development easy and productive\n\nKoin is a smart Kotlin dependency injection library to keep you focused on your app, not on your tools.\n\n```kotlin\n\nclass MyRepository()\nclass MyPresenter(val repository : MyRepository) \n\n// just declare it \nval myModule = module { \n  singleOf(::MyPresenter)\n  singleOf(::MyRepository)\n}\n```\n\nKoin gives you simple tools and API to let you build, assemble Kotlin related technologies into your application and let you scale your business with easiness.\n\n```kotlin\nfun main() { \n  \n  // Just start Koin\n  startKoin {\n    modules(myModule)\n  }\n} \n```\n\n### Ready for Android\n\nThanks to the Kotlin language, Koin extends the Android platform and provides new features as part of the original platform.\n\n```kotlin\nclass MyApplication : Application() {\n  override fun onCreate() {\n    super.onCreate()\n\n    startKoin {\n      modules(myModule)\n    }\n  } \n}\n```\n\nKoin provides easy and powerful API to retrieve your dependencies anywhere in Android components, with just using by inject() or by viewModel()\n\n```kotlin\nclass MyActivity : AppCompatActivity() {\n\n  val myPresenter : MyPresenter by inject()\n\n} \n```\n\n### Powering Kotlin Multiplatform\n\nSharing code between mobile platforms is one of the major Kotlin Multiplatform use cases. With Kotlin Multiplatform Mobile, you can build cross-platform mobile applications and share common code between Android and iOS.\n\nKoin provides multiplatform dependency injection and help build your components across your native mobile applications, and web/backend applications.\n\n### Performances and Productivity\n\nKoin is a pure Kotlin framework, designed to be straight forward in terms of usage and execution. It easy to use and doesn't impact your compilation time, nor require any extra plugin configuration.\n\n## Koin: A Dependency Injection Framework\n\nKoin is a popular dependency injection (DI) framework for Kotlin, offering a modern and lightweight solution for managing your application’s dependencies with minimal boilerplate code.\n\n### Dependency Injection vs. Service Locator\n\nWhile Koin may appear similar to a service locator pattern, there are key differences that set it apart:\n\n- Service Locator: A service locator is essentially a registry of available services where you can request an instance of a service as needed. It is responsible for creating and managing these instances, often using a static, global registry.\n\n- Dependency Injection: In contrast, Koin is a pure dependency injection framework. With Koin, you declare your dependencies in modules, and Koin handles the creation and wiring of objects. It allows for the creation of multiple, independent modules with their own scopes, making dependency management more modular and avoiding potential conflicts.\n\n### Koin’s Approach: A Blend of Flexibility and Best Practices\n\nKoin supports both DI and the Service Locator pattern, offering flexibility to developers. However, it strongly encourages the use of DI, particularly constructor injection, where dependencies are passed as constructor parameters. This approach promotes better testability and makes your code easier to reason about.\n\nKoin’s design philosophy is centered around simplicity and ease of setup while allowing for complex configurations when necessary. By using Koin, developers can manage dependencies effectively, with DI being the recommended and preferred approach for most scenarios.\n\n\n### Transparency and Design Overview\n\nKoin is designed to be a versatile Inversion of Control (IoC) container that supports both Dependency Injection (DI) and Service Locator (SL) patterns. To provide a clear understanding of how Koin operates and to guide you in using it effectively, let’s explore the following aspects:\n\n#### How Koin Balances DI and SL\n\nKoin combines elements of both DI and SL, which may influence how you use the framework:\n\n1. **Global Context Usage:** By default, Koin provides a globally accessible component that acts like a service locator. This allows you to retrieve dependencies from a central registry using `KoinComponent` or `inject` functions.\n\n2. **Isolated Components:** Although Koin encourages the use of Dependency Injection, particularly constructor injection, it also allows for isolated components. This flexibility means you can configure your application to use DI where it makes the most sense while still taking advantage of SL for specific cases.\n\n3. **SL in Android Components:** In Android development, Koin often uses SL internally within components such as `Application` and `Activity` for ease of setup. From this point, Koin recommends DI, especially constructor injection, to manage dependencies in a more structured way. However, this is not enforced, and developers have the flexibility to use SL if needed.\n\n#### Why This Matters to You\n\nUnderstanding the distinction between DI and SL helps in managing your application’s dependencies effectively:\n\n- **Dependency Injection:** Encouraged by Koin for its benefits in testability and maintainability. Constructor injection is preferred as it makes dependencies explicit and enhances code clarity.\n\n- **Service Locator:** While Koin supports SL for convenience, especially in Android components, relying solely on SL can lead to tighter coupling and reduced testability. Koin’s design provides a balanced approach, allowing you to use SL where it’s practical but promoting DI as the best practice.\n\n#### Making the Most of Koin\n\nTo use Koin effectively:\n\n- **Follow Best Practices:** Use constructor injection where possible to align with best practices for dependency management. This approach improves testability and maintainability.\n\n- **Leverage Koin’s Flexibility:** Utilize Koin’s support for SL in scenarios where it simplifies setup, but aim to rely on DI for managing core application dependencies.\n\n- **Refer to Documentation and Examples:** Review Koin’s documentation and examples to understand how to configure and use DI and SL appropriately based on your project needs.\n\n- **Visualize Dependency Management:** Diagrams and examples can help illustrate how Koin resolves dependencies and manages them within different contexts. These visual aids can provide a clearer understanding of Koin’s internal workings.\n\n> By providing this guidance, we aim to help you navigate Koin’s features and design choices effectively, ensuring you can leverage its full potential while adhering to best practices in dependency management.",
      "translation": "---\ntitle: Why Koin?\n---\nn\nKoin 提供了一种简单有效的方式，将依赖注入整合到任何 Kotlin 应用程序中（多平台、Android、后端...）\n\nKoin 的目标是：\n- 使用智能 API 简化您的依赖注入基础设施\n- Kotlin DSL 易于阅读、易于使用，让您可以编写任何类型的应用程序\n- 提供来自 Android 生态系统的不同类型的集成，以满足更多后端需求，如 Ktor\n- 允许与注解一起使用\n\n## Koin 简述\n\n### 让您的 Kotlin 开发变得简单高效\n\nKoin 是一个智能的 Kotlin 依赖注入库，让您专注于您的应用程序，而不是您的工具。\n\n```kotlin\n\nclass MyRepository()\nclass MyPresenter(val repository : MyRepository) \n\n// just declare it \nval myModule = module { \n  singleOf(::MyPresenter)\n  singleOf(::MyRepository)\n}\n```\n\nKoin 为您提供简单的工具和 API，让您可以构建、组装 Kotlin 相关技术到您的应用程序中，并让您轻松扩展您的业务。\n\n```kotlin\nfun main() { \n  \n  // Just start Koin\n  startKoin {\n    modules(myModule)\n  }\n} \n```\n\n### 为 Android 准备就绪\n\n得益于 Kotlin 语言，Koin 扩展了 Android 平台，并提供了作为原始平台一部分的新功能。\n\n```kotlin\nclass MyApplication : Application() {\n  override fun onCreate() {\n    super.onCreate()\n\n    startKoin {\n      modules(myModule)\n    }\n  } \n}\n```\n\nKoin 提供了简单而强大的 API，只需使用 by inject() 或 by viewModel() 即可在 Android 组件中的任何位置检索您的依赖项。\n\n```kotlin\nclass MyActivity : AppCompatActivity() {\n\n  val myPresenter : MyPresenter by inject()\n\n} \n```\n\n### 赋能 Kotlin 多平台\n\n在移动平台之间共享代码是 Kotlin 多平台的主要用例之一。借助 Kotlin Multiplatform Mobile，您可以构建跨平台移动应用程序，并在 Android 和 iOS 之间共享通用代码。\n\nKoin 提供多平台依赖注入，并帮助您在原生移动应用程序和 Web/后端应用程序中构建组件。\n\n### 性能和生产力\n\nKoin 是一个纯 Kotlin 框架，旨在用法和执行方面都直截了当。它易于使用，不会影响您的编译时间，也不需要任何额外的插件配置。\n\n## Koin：一个依赖注入框架\n\nKoin 是一个流行的 Kotlin 依赖注入 (DI) 框架，提供了一种现代且轻量级的解决方案，用于以最少的样板代码管理应用程序的依赖项。\n\n### 依赖注入 vs. 服务定位器\n\n虽然 Koin 可能看起来类似于服务定位器模式，但它们之间存在关键差异：\n\n- 服务定位器：服务定位器本质上是一个可用服务的注册表，您可以在需要时请求服务的实例。它负责创建和管理这些实例，通常使用静态的全局注册表。\n\n- 依赖注入：相比之下，Koin 是一个纯粹的依赖注入框架。使用 Koin，您可以在模块中声明您的依赖项，Koin 会处理对象的创建和连接。它允许创建具有自己作用域的多个独立模块，从而使依赖项管理更加模块化，并避免潜在的冲突。\n\n### Koin 的方法：灵活性和最佳实践的结合\n\nKoin 同时支持 DI 和服务定位器模式，为开发人员提供了灵活性。但是，它强烈鼓励使用 DI，特别是构造函数注入，其中依赖项作为构造函数参数传递。这种方法可以提高可测试性，并使您的代码更易于理解。\n\nKoin 的设计理念围绕简单性和易于设置，同时允许在必要时进行复杂的配置。通过使用 Koin，开发人员可以有效地管理依赖项，其中 DI 是大多数情况下推荐和首选的方法。\n\n### 透明度和设计概述\n\nKoin 被设计为一个通用的控制反转 (IoC) 容器，支持依赖注入 (DI) 和服务定位器 (SL) 模式。为了清楚地了解 Koin 的运作方式并指导您有效地使用它，让我们探讨以下几个方面：\n\n#### Koin 如何平衡 DI 和 SL\n\nKoin 结合了 DI 和 SL 的元素，这可能会影响您使用框架的方式：\n\n1. **全局上下文使用：** 默认情况下，Koin 提供了一个全局可访问的组件，该组件充当服务定位器。这允许您使用 `KoinComponent` 或 `inject` 函数从中央注册表检索依赖项。\n\n2. **隔离组件：** 尽管 Koin 鼓励使用依赖注入，特别是构造函数注入，但它也允许使用隔离组件。这种灵活性意味着您可以配置您的应用程序以在最有意义的地方使用 DI，同时仍然可以利用 SL 来处理特定情况。\n\n3. **Android 组件中的 SL：** 在 Android 开发中，Koin 通常在 `Application` 和 `Activity` 等组件内部使用 SL，以简化设置。从这一点开始，Koin 建议使用 DI，特别是构造函数注入，以更结构化的方式管理依赖项。但是，这不是强制性的，开发人员可以灵活地在需要时使用 SL。\n\n#### 这对您有何影响\n\n了解 DI 和 SL 之间的区别有助于有效地管理应用程序的依赖项：\n\n- **依赖注入：** Koin 鼓励使用，因为它在可测试性和可维护性方面具有优势。构造函数注入是首选，因为它使依赖项显式化并增强了代码的清晰度。\n\n- **服务定位器：** 虽然 Koin 支持 SL 以提供便利，尤其是在 Android 组件中，但仅依赖 SL 可能会导致更紧密的耦合和降低的可测试性。Koin 的设计提供了一种平衡的方法，允许您在实际情况下使用 SL，但提倡将 DI 作为最佳实践。\n\n#### 充分利用 Koin\n\n要有效地使用 Koin：\n\n- **遵循最佳实践：** 尽可能使用构造函数注入，以符合依赖项管理的最佳实践。这种方法可以提高可测试性和可维护性。\n\n- **利用 Koin 的灵活性：** 在简化设置的情况下利用 Koin 对 SL 的支持，但目标是依靠 DI 来管理核心应用程序依赖项。\n\n- **参考文档和示例：** 查看 Koin 的文档和示例，以了解如何根据您的项目需求配置和使用 DI 和 SL。\n\n- **可视化依赖项管理：** 图表和示例可以帮助说明 Koin 如何解析依赖项并在不同上下文中管理它们。这些可视化辅助工具可以更清楚地了解 Koin 的内部运作。\n\n> 通过提供此指导，我们旨在帮助您有效地浏览 Koin 的功能和设计选择，确保您可以充分利用其潜力，同时遵守依赖项管理的最佳实践。",
      "lastUpdated": "2025-04-03T12:40:53.595Z"
    },
    "330cd44e857ec4d98f503a23c33e45d3": {
      "source": "---\ntitle: API Stability & Release Types\ncustom_edit_url: null\n---\n\n## API Stability\n\nThe Koin project is committed to maintaining a high level of compatibility between versions. Kotzilla team and all active maintainers works to ensure that any changes, enhancements, or optimizations introduced in new releases do not break existing applications. \nWe understand that a stable and predictable upgrade path is critical to our users, and we strive to minimize disruptions when evolving our APIs.\n\n### Experimental APIs - @KoinExperimentalAPI\nTo foster innovation while gathering valuable community feedback, we introduce new features and APIs under the `@KoinExperimentalAPI` annotation. This designation indicates that:\n\n- **Under active development**: The API is still in its design phase and is subject to change.\n- **Feedback encouraged**: We invite developers to test these features and share their experiences, helping us refine and improve the design.\n- **Potential breaking changes**: Because these APIs are experimental, they might be modified or removed in subsequent releases as we iterate based on community input.\n\n### Deprecation Policy - @Deprecated\n\nTo ensure a smooth transition when parts of the API are being phased out, Koin uses the `@Deprecated` annotation to clearly mark these areas. Our deprecation strategy includes:\n\nClear warnings: Deprecated APIs come with a message indicating the recommended alternative or the reason for deprecation.\n\nDeprecation levels:\n- **Warning**: Signals that while the API is still available, its use is discouraged and should be replaced at the earliest opportunity.\n- **Error**: Denotes that the API is no longer intended for use and will not compile, ensuring that important changes are addressed promptly.\n\nThis approach helps developers identify and update code that relies on outdated APIs, reducing technical debt and paving the way for a cleaner, more robust codebase.\n`ReplaceWith` can be provided with the API, depending on the complexity of the update. \n\n### Internal APIs - @KoinInternalAPI\n\nFor functionalities that are strictly intended for internal use within the Koin framework, we introduce the `@KoinInternalAPI` annotation. These APIs are not part of the public contract and:\n\n- **Internal use only**: Are designed solely for the internal mechanisms of Koin.\n- **Subject to change**: May undergo modifications or be removed in future releases without prior notice.\n- **Avoid external usage**: Developers are discouraged from using these APIs in their application code to maintain long-term compatibility.\n\n### Opting In with Kotlin's @OptIn Annotation\n\nBoth experimental and deprecated API usages in Koin requires an opt-in, ensuring that developers are fully aware of the API’s status and potential risks. \nBy using Kotlin's `@OptIn` annotation, you explicitly acknowledge that your code depends on APIs that are experimental or marked for deprecation.\n\n## Release Types\n\nKoin adheres to semantic versioning (SemVer) with additional prefix identifiers that signal the maturity and intended use of each release. The prefixes we use include:\n\n- **Release Candidate (RC)**: These releases are feature-complete candidates for stable versions. They undergo final testing and refinement. While RC versions are intended to be highly compatible, minor changes may still occur based on final feedback before an official release.\n- **Alpha / Beta**: Alpha and beta versions are made available primarily for testing and feedback. They often contain experimental features and may not fully conform to stable API guarantees. Developers are encouraged to try these releases in non-production environments to help identify potential issues and guide future improvements.\n\n",
      "translation": "---\ntitle: API Stability & Release Types\ncustom_edit_url: null\n---\n## API 稳定性\n\nKoin 项目致力于在版本之间保持高水平的兼容性。Kotzilla 团队和所有活跃的维护者都在努力确保新版本中引入的任何更改、增强或优化都不会破坏现有应用程序。\n我们深知，稳定且可预测的升级路径对我们的用户至关重要，因此我们努力在发展我们的 API 时尽量减少中断。\n\n### 实验性 API - @KoinExperimentalAPI\n为了在收集有价值的社区反馈的同时促进创新，我们在 `@KoinExperimentalAPI` 注解下引入了新的特性和 API。此指定表示：\n\n- **正在积极开发中**：该 API 仍处于设计阶段，可能会发生变化。\n- **鼓励反馈**：我们邀请开发人员测试这些特性并分享他们的经验，以帮助我们改进和完善设计。\n- **潜在的破坏性更改**：由于这些 API 是实验性的，因此可能会在后续版本中进行修改或删除，因为我们会根据社区的意见进行迭代。\n\n### 弃用策略 - @Deprecated\n\n为了确保在 API 的某些部分被逐步淘汰时能够平稳过渡，Koin 使用 `@Deprecated` 注解来清楚地标记这些区域。我们的弃用策略包括：\n\n明确的警告：已弃用的 API 附带一条消息，指示推荐的替代方案或弃用原因。\n\n弃用级别：\n- **Warning**：表示虽然该 API 仍然可用，但不鼓励使用，应尽早替换。\n- **Error**：表示该 API 不再打算使用，并且不会编译，从而确保及时处理重要的更改。\n\n这种方法有助于开发人员识别和更新依赖于过时 API 的代码，从而减少技术债务，并为更清晰、更健壮的代码库铺平道路。\n`ReplaceWith` 可以与 API 一起提供，具体取决于更新的复杂性。\n\n### 内部 API - @KoinInternalAPI\n\n对于严格用于 Koin 框架内部的功能，我们引入了 `@KoinInternalAPI` 注解。这些 API 不是公共契约的一部分，并且：\n\n- **仅供内部使用**：专门为 Koin 的内部机制而设计。\n- **可能会发生变化**：可能会在未来的版本中进行修改或删除，恕不另行通知。\n- **避免外部使用**：不鼓励开发人员在他们的应用程序代码中使用这些 API，以保持长期的兼容性。\n\n### 使用 Kotlin 的 @OptIn 注解选择加入\n\nKoin 中实验性和已弃用的 API 用法都需要选择加入，以确保开发人员完全了解 API 的状态和潜在风险。\n通过使用 Kotlin 的 `@OptIn` 注解，您可以明确承认您的代码依赖于实验性或标记为已弃用的 API。\n\n## 发布类型\n\nKoin 遵循语义版本控制 (SemVer)，并带有额外的标识符前缀，用于指示每个版本的成熟度和预期用途。我们使用的前缀包括：\n\n- **Release Candidate (RC)**：这些版本是功能完整的稳定版本候选版本。它们经过最终测试和改进。虽然 RC 版本旨在高度兼容，但根据官方发布前的最终反馈，仍可能发生细微更改。\n- **Alpha / Beta**：Alpha 和 Beta 版本主要用于测试和反馈。它们通常包含实验性功能，可能不完全符合稳定的 API 保证。鼓励开发人员在非生产环境中使用这些版本，以帮助识别潜在问题并指导未来的改进。\n",
      "lastUpdated": "2025-04-03T12:40:57.855Z"
    },
    "c9ed5e3d21225b4c126a1a3bfb8d5c34": {
      "source": "---\ntitle: Koin Embedded\ncustom_edit_url: null\n---\n\nKoin Embedded is a new Koin project, targeting Android/Kotlin SDK & Library developers.\n\nThis project proposes scripts to help rebuild & package Koin project with a different package name. The interest is for SDK & Library development, to avoid conflict between embedded Koin version and any consuming application that would use another version of Koin, that might conflict.\n\nFeedback or help? Contact [Koin Team](mailto:koin@kotzilla.io).\n\n\n## Embedded Version\n\nHere is an example of Koin embeded version: [Kotzilla Repository](https://repository.kotzilla.io/#browse/browse:Koin-Embedded)\n- Available packages: `embedded-koin-core`, `embedded-koin-android`\n- Relocation on from `org.koin.*` to `embedded.koin.*`\n\nSetupr your Gradle config with this Maven repository:\n```kotlin\nmaven { 'https://repository.kotzilla.io/repository/kotzilla-platform/' }\n```\n\n## Relocation Scripts\n\nHere is some scripts that help rebuild Koin for a given package name, helping to embed it and avoid conflict with regular usage of Koin framework.\n\nFollow-up on Koin [relocation scripts](https://github.com/InsertKoinIO/koin-embedded?tab=readme-ov-file#koin-relocation-scripts) project for more details.",
      "translation": "---\ntitle: Koin Embedded\ncustom_edit_url: null\n---\nKoin Embedded 是一个新的 Koin 项目，目标是 Android/Kotlin SDK & Library 开发者。\n\n这个项目提出了脚本来帮助使用不同的包名重建和打包 Koin 项目。其目的是为了 SDK & Library 的开发，以避免嵌入的 Koin 版本与任何使用其他 Koin 版本的消费应用程序之间发生冲突，这可能会导致冲突。\n\n反馈或帮助？联系 [Koin Team](mailto:koin@kotzilla.io)。\n\n## Embedded Version\n\n这是一个 Koin 嵌入版本的例子：[Kotzilla Repository](https://repository.kotzilla.io/#browse/browse:Koin-Embedded)\n- 可用包：`embedded-koin-core`, `embedded-koin-android`\n- 从 `org.koin.*` 迁移到 `embedded.koin.*`\n\n使用此 Maven 仓库设置您的 Gradle 配置：\n```kotlin\nmaven { 'https://repository.kotzilla.io/repository/kotzilla-platform/' }\n```\n\n## Relocation Scripts\n\n这里有一些脚本可以帮助为给定的包名重建 Koin，帮助嵌入它并避免与 Koin 框架的常规使用发生冲突。\n\n关注 Koin [relocation scripts](https://github.com/InsertKoinIO/koin-embedded?tab=readme-ov-file#koin-relocation-scripts) 项目以获取更多详细信息。\n```",
      "lastUpdated": "2025-04-03T12:40:59.708Z"
    },
    "3301cb9f53b351f58deaadca90850cc6": {
      "source": "---\ntitle: Versions, Roadmap & Support\ncustom_edit_url: null\n---\n\nThe Koin team is leading its development with open-source and community-driven approach since the beginning, and propose commercial services to secure your development.\n\n## Releases Cycle\n\nWe drive our developments with release cycles of 6 months to follow Kotlin language and library updates in a consistent manner. We will use beta periods of 6 weeks or more, to help gather first feedbacks.\n\nOnce a new version is released, we start the Community support phase for 6 months minimum. During that phase, we are actively gathering feedbacks, following all updates impacting our framework, like librairies, Kotling Android, Ktor and others frameworks versions.\n\n## Establishing Roadmap with Structured Versions \n\nThe first big thing for the Koin project is organizing release cycles to establish a clear vision on versions deployment, and to help you anticipate updates and new features. We need a clear version tracking: `Major.Minor.Patch`\n\n- Patch version: fixes only, minor dependency library updates\n- Minor version: New features & deprecations\n- Major features: New Impacting features, deprecations & hard breaking\n\nWe now drive our developments with release cycles of 6 months to follow Kotlin language and library updates in a consistent manner. We will use beta periods of 6 weeks to help gather first feedbacks.\n\n## Enterprise Support by Kotzilla\n\nCompanies might struggle to follow the Koin release cycle for various reasons, including legal, business, or technical constraints.\nAs a result, when adopting a new technology, companies may require company-backed support and clear open-source license warranties.\n\nFor these reasons, Kotzilla has designated Koin 3.5.6 as our Long-Term Support version, as it is the most advanced and stable version of Koin for Kotlin 1.x.\nWe offer peace of mind until at least December 2025 by ensuring compatibility, code audits, and fast-track support for companies that need it.\n\nMore information about Koin [Long Term Support](https://support.insert-koin.io) by [Kotzilla](https://kotzilla.io).\n\n\n\n\n",
      "translation": "---\ntitle: Versions, Roadmap & Support\ncustom_edit_url: null\n---\nKoin 团队从一开始就以开源和社区驱动的方式领导其开发，并提供商业服务来确保您的开发。\n\n## 发布周期\n\n我们以 6 个月的发布周期来推动我们的开发，以便以一致的方式跟进 Kotlin 语言和库的更新。我们将使用 6 周或更长的 beta 期，以帮助收集初步反馈。\n\n一旦发布新版本，我们将启动至少 6 个月的社区支持阶段。在该阶段，我们将积极收集反馈，跟踪所有影响我们框架的更新，例如库、Kotlin Android、Ktor 和其他框架版本。\n\n## 建立具有结构化版本的路线图\n\nKoin 项目的首要大事是组织发布周期，以建立对版本部署的清晰愿景，并帮助您预测更新和新功能。我们需要一个清晰的版本跟踪：`Major.Minor.Patch`\n\n- Patch 版本：仅修复，次要依赖库更新\n- Minor 版本：新功能和弃用\n- Major 版本：新的影响性功能、弃用和重大变更\n\n我们现在以 6 个月的发布周期来推动我们的开发，以便以一致的方式跟进 Kotlin 语言和库的更新。我们将使用 6 周的 beta 期来帮助收集初步反馈。\n\n## Kotzilla 的企业支持\n\n由于各种原因，包括法律、业务或技术限制，公司可能难以跟进 Koin 的发布周期。\n因此，在采用新技术时，公司可能需要公司支持和明确的开源许可保证。\n\n由于这些原因，Kotzilla 已将 Koin 3.5.6 指定为我们的长期支持版本，因为它是 Koin for Kotlin 1.x 最先进和最稳定的版本。\n我们至少在 2025 年 12 月之前提供安心保障，确保兼容性、代码审计以及为需要它的公司提供快速通道支持。\n\n有关 Koin [Long Term Support](https://support.insert-koin.io) 的更多信息，请访问 [Kotzilla](https://kotzilla.io)。\n",
      "lastUpdated": "2025-04-03T12:41:02.262Z"
    },
    "994a951f5947f9b1f554cca5362d912c": {
      "source": "---\ntitle: Releases & API Compatibility Guide\ncustom_edit_url: null\n---\n\n:::info\nThis pages provides a comprehensive overview of every Koin main release, detailing the evolution of our framework to help you plan for upgrades and maintain compatibility.\n:::\n\nFor each version, the document is structured into the following sections:\n\n- `Kotlin`: Specifies the Kotlin version used for the release, ensuring clarity on language compatibility and enabling you to leverage the latest Kotlin features.\n- `New`: Highlights the newly introduced features and improvements that enhance functionality and developer experience.\n- `Experimental`: Lists APIs and features marked as experimental. These are under active development and subject to change based on community feedback.\n- `Deprecated`: Identifies APIs and features that have been marked for deprecation, along with guidance on recommended alternatives, helping you prepare for future removals.\n- `Breaking`: Details any changes that may break backward compatibility, ensuring that you are aware of necessary adjustments during migration.\n\nThis structured approach not only clarifies the incremental changes in each release but also reinforces our commitment to transparency, stability, and continuous improvement in the Koin project.\n\n## 4.0.3\n\n:::note\nUses Kotlin `2.0.21`\n:::\n\nAll used lib versions are located in [libs.versions.toml](https://github.com/InsertKoinIO/koin/blob/main/projects/gradle/libs.versions.toml)\n\n### New 🎉\n\n`koin-core`\n- `KoinPlatformTools.generateId()` - With this new version of Kotlin, we benefit from new `kotlin.uuid.uuid` API. The `KoinPlatformTools.generateId()` Koin function now uses this new API to generates real UUID over platforms.\n\n`koin-viewmodel`\n - Koin 4.0 introduces new ViewModel DSL & API that mutualise the Google/Jetbrains KMP API. To avoid duplication over the codebase, the ViewModel API is now located in `koin-core-viewmodel` & `koin-core-viewmodel-navigation` projects.\n - Import for ViewModel DSL is `org.koin.core.module.dsl.*`\n\nFollowing APIs in given projects, are now stable.\n\n`koin-core-coroutines` - all API is now stable\n  - all `lazyModules` \n  - `awaitAllStartJobs`, `onKoinStarted`, `isAllStartedJobsDone`\n  - `waitAllStartJobs`, `runOnKoinStarted`\n  - `KoinApplication.coroutinesEngine`\n  - `Module.includes(lazy)`\n  - `lazyModule()`\n  - `KoinPlatformCoroutinesTools`\n\n### Experimental 🚧\n\n`koin-test`\n- `ParameterTypeInjection` - new API to help design dynamic parameter injection for `Verify` API\n\n`koin-androidx-startup`\n- `koin-androidx-startup` - New capacity to start Koin with `AndroidX Startup`, using `androidx.startup.Initializer` API. All API inside `koin-androidx-startup` are Experimental\n\n`koin-compose`\n- `rememberKoinModules` - load/unload Koin modules given a @Composable component\n- `rememberKoinScope` - load/unload Koin Scope given a @Composable component\n- `KoinScope` - Load Koin scope for all underlying Composable children\n\n### Deprecation ⚠️\n\nThe following APIs have been deprecated, and should not be used anymore:\n\n- `koin-test`\n  - all API for `checkModules`. Migrate to `Verify` API.\n\n- `koin-android` \n  - ViewModel DSL in favor of new centralized DSL in koin-core\n\n- `koin-compose-viewmodel` \n  - ViewModel DSL in favor of new centralized DSL in koin-core\n  - function `koinNavViewModel` is now deprecated, in favor of `koinViewModel`\n\n### Breaking 💥\n\nThe following APIs have been removed, due to deprecations in last milestone:\n\n:::note\nall API annotated with `@KoinReflectAPI` has been removed\n:::\n\n`koin-core`\n  - `ApplicationAlreadyStartedException` has been renamed `KoinApplicationAlreadyStartedException`\n  - `KoinScopeComponent.closeScope()` removed, as not used anymore internally\n  - Moved internal `ResolutionContext` to replace `InstanceContext`\n  - `KoinPlatformTimeTools`, `Timer`, `measureDuration` removed, to use Kotlin Time API instead\n  - `KoinContextHandler` removed in favor of `GlobalContext`\n\n`koin-android` \n  - all state ViewModel API are deprecated at error level: \n    - `stateViewModel()`,`getStateViewModel()`, use instead `viewModel()`\n    - `getSharedStateViewModel()`, `sharedStateViewModel()`, use instead `viewModel()` or `activityViewModel()` for shared instance\n  - function `fun Fragment.createScope()` is removed\n  - All API around ViewModel factory (internal mainly) are reworked for new internals\n\n`koin-compose`\n  - old compose API function are deprecated at error level:\n    - functions `inject()` have been removed in favor of `koinInject()`\n    - functions `getViewModel()` has been removed in favor of `koinViewModel()`\n    - function `rememberKoinInject()` has been moved into `koinInject()`, \n  - removed `StableParametersDefinition` as not used  anymore in internals\n  - removed all Lazy ViewModel API - old `viewModel()`\n  - removed `rememberStableParametersDefinition()` as not used internally anymore\n\n## 3.5.6\n\n:::note\nUses Kotlin `1.9.22`\n:::\n\nAll used lib versions are located in [libs.versions.toml](https://github.com/InsertKoinIO/koin/blob/3.5.6/projects/gradle/libs.versions.toml)\n\n### New 🎉\n\n`koin-core`\n  - `KoinContext` now has followings:\n    - `fun loadKoinModules(module: Module, createEagerInstances: Boolean = false)`\n    - `fun loadKoinModules(modules: List<Module>, createEagerInstances: Boolean = false)`\n  - `koinApplication()` function is now using several formats:\n    - `koinApplication(createEagerInstances: Boolean = true, appDeclaration: KoinAppDeclaration? = null)`\n    - `koinApplication(appDeclaration: KoinAppDeclaration?)`\n    - `koinApplication(createEagerInstances: Boolean)`\n  - `KoinAppDeclaration` to help open declaration styles\n  - `KoinPlatformTimeTools` to use API Time for JS\n  - iOS - `synchronized` API to use Touchlab Lockable API\n\n`koin-androidx-compose`\n  - new `KoinAndroidContext` to bind on current Koin context from Android environment\n\n`koin-compose`\n  - new `KoinContext` context starter with current default context\n\n`koin-ktor`\n  - now uses isolated context for Ktor instance (uses `Application.getKoin()` instead of default context)\n  - Koin plugin introduces new monitoring\n  - `RequestScope` to allow scope instance to a Ktor request\n\n### Experimental 🚧\n\n`koin-android`\n  - `ViewModelScope` introduce experimental API for ViewModel scope\n\n`koin-core-coroutines` - introducing new API to load modules in background\n\n### Deprecation ⚠️\n\n`koin-android`\n  - `getLazyViewModelForClass()` API is super complex, and calling to default global context. Prefer stick to Android/Fragment API\n  - `resolveViewModelCompat()` is deprecated in favor of `resolveViewModel()`\n\n`koin-compose`\n  - functions `get()` and `inject()` have been deprecated in favor of `koinInject()`\n  - functions `getViewModel()` has been deprecated in favor of `koinViewModel()`\n  - function `rememberKoinInject()` has been deprecated for `koinInject()`\n\n### Breaking 💥\n\n`koin-core`\n  - `Koin.loadModules(modules: List<Module>, allowOverride: Boolean = true, createEagerInstances : Boolean = false)` is replacing `Koin.loadModules(modules: List<Module>, allowOverride: Boolean = true)`\n  - Moved property `KoinExtension.koin` to function `KoinExtension.onRegister()`  \n  - iOS - `internal fun globalContextByMemoryModel(): KoinContext` to use `MutableGlobalContext`\n\n`koin-compose`\n  - function `KoinApplication(moduleList: () -> List<Module>, content: @Composable () -> Unit)` removed in favor of `KoinContext`, and `KoinAndroidContext`\n\n## 3.4.3\n\n:::note\nUses Kotlin `1.8.21`\n:::\n\n### New 🎉\n\n`koin-core`\n  - New ExtensionManager API to help write extension engine for Koin - `ExtensionManager` + `KoinExtension`\n  - Parameters API update with `parameterArrayOf` & `parameterSetOf` \n\n`koin-test`\n  - `Verification` API - to help run `verify` on a Module.\n\n`koin-android`\n  - internals for ViewModel injection\n  - add `AndroidScopeComponent.onCloseScope()` function callback\n\n`koin-android-test`\n  - `Verification` API - to help run `androidVerify()` on a Module.\n\n`koin-androidx-compose`\n  - new `get()`\n  - new `getViewModel()`\n  - new Scopes `KoinActivityScope`, `KoinFragmentScope`\n\n`koin-androidx-compose-navigation` - New module for navigation\n  - new `koinNavViewModel()`\n\n`koin-compose` - New Multiplatform API for Compose\n  - `koinInject`, `rememberKoinInject`\n  - `KoinApplication`\n\n### Experimental 🚧\n\n`koin-compose` - New Experimental Multiplatform API for Compose\n  - `rememberKoinModules`\n  - `KoinScope`, `rememberKoinScope`\n\n### Deprecation ⚠️\n\n`koin-compose`\n- functions `get()` to replace `inject()` usage avoiding Lazy function\n- functions `getViewModel()` to replace `viewModel()` function, usage avoiding Lazy function\n\n### Breaking 💥\n\n`koin-android`\n  - `LifecycleScopeDelegate` is now removed\n\n`koin-androidx-compose`\n  - Removed `getStateViewModel` in favor of `koinViewModel`\n\n\n\n\n\n\n\n\n",
      "translation": "---\ntitle: Releases & API Compatibility Guide\ncustom_edit_url: null\n---\nn\n:::info\n本页提供了 Koin 主要版本的全面概述，详细介绍了我们框架的演变，以帮助您规划升级并保持兼容性。\n:::\n\n对于每个版本，文档都分为以下几个部分：\n\n- `Kotlin`: 指定用于发布的 Kotlin 版本，确保语言兼容性，并使您能够利用最新的 Kotlin 功能。\n- `New`: 突出显示新引入的功能和改进，这些功能和改进增强了功能和开发者体验。\n- `Experimental`: 列出了标记为实验性的 API 和功能。这些功能正在积极开发中，并会根据社区反馈进行更改。\n- `Deprecated`: 标识已标记为弃用的 API 和功能，以及有关推荐替代方案的指南，帮助您为将来的删除做好准备。\n- `Breaking`: 详细说明了可能破坏向后兼容性的任何更改，确保您了解迁移期间的必要调整。\n\n这种结构化的方法不仅阐明了每个版本中的增量更改，而且还加强了我们对 Koin 项目中透明度、稳定性和持续改进的承诺。\n\n## 4.0.3\n\n:::note\n使用 Kotlin `2.0.21`\n:::\n\n所有使用的库版本都位于 [libs.versions.toml](https://github.com/InsertKoinIO/koin/blob/main/projects/gradle/libs.versions.toml) 中\n\n### New 🎉\n\n`koin-core`\n- `KoinPlatformTools.generateId()` - 借助这个新版本的 Kotlin，我们可以从新的 `kotlin.uuid.uuid` API 中受益。`KoinPlatformTools.generateId()` Koin 函数现在使用这个新的 API 在平台上生成真正的 UUID。\n\n`koin-viewmodel`\n - Koin 4.0 引入了新的 ViewModel DSL & API，它们相互共享 Google/Jetbrains KMP API。为了避免代码库中的重复，ViewModel API 现在位于 `koin-core-viewmodel` & `koin-core-viewmodel-navigation` 项目中。\n - ViewModel DSL 的导入是 `org.koin.core.module.dsl.*`\n\n以下项目中给定的 API 现在是稳定的。\n\n`koin-core-coroutines` - 所有 API 现在都是稳定的\n  - 所有 `lazyModules` \n  - `awaitAllStartJobs`, `onKoinStarted`, `isAllStartedJobsDone`\n  - `waitAllStartJobs`, `runOnKoinStarted`\n  - `KoinApplication.coroutinesEngine`\n  - `Module.includes(lazy)`\n  - `lazyModule()`\n  - `KoinPlatformCoroutinesTools`\n\n### Experimental 🚧\n\n`koin-test`\n- `ParameterTypeInjection` - 新的 API，用于帮助设计 `Verify` API 的动态参数注入\n\n`koin-androidx-startup`\n- `koin-androidx-startup` - 使用 `androidx.startup.Initializer` API，可以使用 `AndroidX Startup` 启动 Koin 的新功能。`koin-androidx-startup` 中的所有 API 都是 Experimental\n\n`koin-compose`\n- `rememberKoinModules` - 加载/卸载给定 @Composable 组件的 Koin 模块\n- `rememberKoinScope` - 加载/卸载给定 @Composable 组件的 Koin Scope\n- `KoinScope` - 为所有底层 Composable 子项加载 Koin scope\n\n### Deprecation ⚠️\n\n以下 API 已被弃用，不应再使用：\n\n- `koin-test`\n  - `checkModules` 的所有 API。迁移到 `Verify` API。\n\n- `koin-android` \n  - ViewModel DSL，支持 koin-core 中的新集中式 DSL\n\n- `koin-compose-viewmodel` \n  - ViewModel DSL，支持 koin-core 中的新集中式 DSL\n  - 函数 `koinNavViewModel` 现在已弃用，支持 `koinViewModel`\n\n### Breaking 💥\n\n由于上次里程碑中的弃用，以下 API 已被删除：\n\n:::note\n所有使用 `@KoinReflectAPI` 注释的 API 都已被删除\n:::\n\n`koin-core`\n  - `ApplicationAlreadyStartedException` 已重命名为 `KoinApplicationAlreadyStartedException`\n  - `KoinScopeComponent.closeScope()` 已删除，因为不再在内部使用\n  - 移动了内部 `ResolutionContext` 以替换 `InstanceContext`\n  - `KoinPlatformTimeTools`、`Timer`、`measureDuration` 已删除，以使用 Kotlin Time API 代替\n  - `KoinContextHandler` 已删除，支持 `GlobalContext`\n\n`koin-android` \n  - 所有状态 ViewModel API 都已在错误级别弃用：\n    - `stateViewModel()`,`getStateViewModel()`，请改用 `viewModel()`\n    - `getSharedStateViewModel()`, `sharedStateViewModel()`，对于共享实例，请改用 `viewModel()` 或 `activityViewModel()`\n  - 函数 `fun Fragment.createScope()` 已删除\n  - ViewModel 工厂周围的所有 API（主要是内部 API）都已针对新的内部结构进行了重新设计\n\n`koin-compose`\n  - 旧的 compose API 函数已在错误级别弃用：\n    - 函数 `inject()` 已删除，支持 `koinInject()`\n    - 函数 `getViewModel()` 已删除，支持 `koinViewModel()`\n    - 函数 `rememberKoinInject()` 已移至 `koinInject()`\n  - 删除了 `StableParametersDefinition`，因为它不再在内部使用\n  - 删除了所有 Lazy ViewModel API - 旧的 `viewModel()`\n  - 删除了 `rememberStableParametersDefinition()`，因为它不再在内部使用\n\n## 3.5.6\n\n:::note\n使用 Kotlin `1.9.22`\n:::\n\n所有使用的库版本都位于 [libs.versions.toml](https://github.com/InsertKoinIO/koin/blob/3.5.6/projects/gradle/libs.versions.toml) 中\n\n### New 🎉\n\n`koin-core`\n  - `KoinContext` 现在具有以下内容：\n    - `fun loadKoinModules(module: Module, createEagerInstances: Boolean = false)`\n    - `fun loadKoinModules(modules: List<Module>, createEagerInstances: Boolean = false)`\n  - `koinApplication()` 函数现在使用多种格式：\n    - `koinApplication(createEagerInstances: Boolean = true, appDeclaration: KoinAppDeclaration? = null)`\n    - `koinApplication(appDeclaration: KoinAppDeclaration?)`\n    - `koinApplication(createEagerInstances: Boolean)`\n  - `KoinAppDeclaration` 帮助打开声明样式\n  - `KoinPlatformTimeTools` 用于 JS 的 API Time\n  - iOS - `synchronized` API 用于 Touchlab Lockable API\n\n`koin-androidx-compose`\n  - 新的 `KoinAndroidContext` 用于绑定到 Android 环境中的当前 Koin 上下文\n\n`koin-compose`\n  - 新的 `KoinContext` 上下文启动器，带有当前默认上下文\n\n`koin-ktor`\n  - 现在为 Ktor 实例使用隔离的上下文（使用 `Application.getKoin()` 而不是默认上下文）\n  - Koin 插件引入了新的监控\n  - `RequestScope` 允许将 scope 实例绑定到 Ktor 请求\n\n### Experimental 🚧\n\n`koin-android`\n  - `ViewModelScope` 引入了 ViewModel scope 的实验性 API\n\n`koin-core-coroutines` - 引入了在后台加载模块的新 API\n\n### Deprecation ⚠️\n\n`koin-android`\n  - `getLazyViewModelForClass()` API 非常复杂，并且调用默认的全局上下文。最好坚持使用 Android/Fragment API\n  - `resolveViewModelCompat()` 已弃用，支持 `resolveViewModel()`\n\n`koin-compose`\n  - 函数 `get()` 和 `inject()` 已弃用，支持 `koinInject()`\n  - 函数 `getViewModel()` 已弃用，支持 `koinViewModel()`\n  - 函数 `rememberKoinInject()` 已弃用，支持 `koinInject()`\n\n### Breaking 💥\n\n`koin-core`\n  - `Koin.loadModules(modules: List<Module>, allowOverride: Boolean = true, createEagerInstances : Boolean = false)` 正在替换 `Koin.loadModules(modules: List<Module>, allowOverride: Boolean = true)`\n  - 将属性 `KoinExtension.koin` 移动到函数 `KoinExtension.onRegister()`  \n  - iOS - `internal fun globalContextByMemoryModel(): KoinContext` 使用 `MutableGlobalContext`\n\n`koin-compose`\n  - 函数 `KoinApplication(moduleList: () -> List<Module>, content: @Composable () -> Unit)` 已删除，支持 `KoinContext` 和 `KoinAndroidContext`\n\n## 3.4.3\n\n:::note\n使用 Kotlin `1.8.21`\n:::\n\n### New 🎉\n\n`koin-core`\n  - 新的 ExtensionManager API，用于帮助为 Koin 编写扩展引擎 - `ExtensionManager` + `KoinExtension`\n  - 使用 `parameterArrayOf` & `parameterSetOf` 更新 Parameters API\n\n`koin-test`\n  - `Verification` API - 帮助在 Module 上运行 `verify`。\n\n`koin-android`\n  - ViewModel 注入的内部结构\n  - 添加 `AndroidScopeComponent.onCloseScope()` 函数回调\n\n`koin-android-test`\n  - `Verification` API - 帮助在 Module 上运行 `androidVerify()`。\n\n`koin-androidx-compose`\n  - 新的 `get()`\n  - 新的 `getViewModel()`\n  - 新的 Scopes `KoinActivityScope`, `KoinFragmentScope`\n\n`koin-androidx-compose-navigation` - 用于导航的新模块\n  - 新的 `koinNavViewModel()`\n\n`koin-compose` - 用于 Compose 的新多平台 API\n  - `koinInject`, `rememberKoinInject`\n  - `KoinApplication`\n\n### Experimental 🚧\n\n`koin-compose` - 用于 Compose 的新 Experimental 多平台 API\n  - `rememberKoinModules`\n  - `KoinScope`, `rememberKoinScope`\n\n### Deprecation ⚠️\n\n`koin-compose`\n- 函数 `get()` 替换 `inject()` 用法，避免 Lazy 函数\n- 函数 `getViewModel()` 替换 `viewModel()` 函数，避免 Lazy 函数\n\n### Breaking 💥\n\n`koin-android`\n  - `LifecycleScopeDelegate` 现在已删除\n\n`koin-androidx-compose`\n  - 删除了 `getStateViewModel`，支持 `koinViewModel`",
      "lastUpdated": "2025-04-03T12:41:14.008Z"
    },
    "580cc99e5b3dcfd0d03b73410111cecb": {
      "source": "---\ntitle: Kotlin\n---\n\n> This tutorial lets you write a Kotlin application and use Koin dependency injection to retrieve your components.\n> You need around __10 min__ to do the tutorial.\n\n:::note\nupdate - 2024-10-21\n:::\n\n## Get the code\n\n:::info\n[The source code is available at on Github](https://github.com/InsertKoinIO/koin-getting-started/tree/main/kotlin)\n:::\n\n## Setup\n\nFirst, check that the `koin-core` dependency is added like below:\n\n```groovy\ndependencies {\n    \n    // Koin for Kotlin apps\n    compile \"io.insert-koin:koin-core:$koin_version\"\n}\n```\n\n## Application Overview\n\nThe idea of the application is to manage a list of users, and display it in our `UserApplication` class:\n\n> Users -> UserRepository -> UserService -> UserApplication\n\n## The \"User\" Data\n\nWe will manage a collection of Users. Here is the data class: \n\n```kotlin\ndata class User(val name : String)\n```\n\nWe create a \"Repository\" component to manage the list of users (add users or find one by name). Here below, the `UserRepository` interface and its implementation:\n\n```kotlin\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n## The Koin module\n\nUse the `module` function to declare a Koin module. A Koin module is the place where we define all our components to be injected.\n\n```kotlin\nval appModule = module {\n    \n}\n```\n\nLet's declare our first component. We want a singleton of `UserRepository`, by creating an instance of `UserRepositoryImpl`\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n}\n```\n\n## The UserService Component\n\nLet's write the UserService component to request the default user:\n\n```kotlin\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n\n> UserRepository is referenced in UserPresenter`s constructor\n\nWe declare `UserService` in our Koin module. We declare it as a `single` definition:\n\n```kotlin\nval appModule = module {\n     single<UserRepository> { UserRepositoryImpl() }\n     single { UserService(get()) }\n}\n```\n\n> The `get()` function allow to ask Koin to resolve the needed dependency.\n\n## Injecting Dependencies in UserApplication\n\nThe `UserApplication` class will help bootstrap instances out of Koin. It will resolve the `UserService`, thanks to `KoinComponent` interface. This allows to inject it with the `by inject()` delegate function: \n\n```kotlin\nclass UserApplication : KoinComponent {\n\n    private val userService : UserService by inject()\n\n    // display our data\n    fun sayHello(){\n        val user = userService.getDefaultUser()\n        val message = \"Hello '$user'!\"\n        println(message)\n    }\n}\n```\n\nThat's it, your app is ready.\n\n:::info\nThe `by inject()` function allows us to retrieve Koin instances, in any class that extends `KoinComponent`\n:::\n\n\n## Start Koin\n\nWe need to start Koin with our application. Just call the `startKoin()` function in the application's main entry point, our `main` function:\n\n```kotlin\nfun main() {\n    startKoin {\n        modules(appModule)\n    }\n\n    UserApplication().sayHello()\n}\n```\n\n:::info\nThe `modules()` function in `startKoin` load the given list of modules\n:::\n\n## Koin module: classic or constructor DSL?\n\nHere is the Koin module declaration for our app:\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n    single { UserService(get()) }\n}\n```\n\nWe can write it in a more compact way, by using constructors:\n\n```kotlin\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```\n",
      "translation": "---\ntitle: Kotlin\n---\n> 本教程将引导你编写一个 Kotlin 应用程序，并使用 Koin 依赖注入来检索你的组件。\n> 完成本教程大约需要 __10 分钟__。\n\n:::note\n更新 - 2024-10-21\n:::\n\n## 获取代码\n\n:::info\n[源代码可在 Github 上找到](https://github.com/InsertKoinIO/koin-getting-started/tree/main/kotlin)\n:::\n\n## 设置\n\n首先，检查是否已添加 `koin-core` 依赖项，如下所示：\n\n```groovy\ndependencies {\n    \n    // Koin for Kotlin apps\n    compile \"io.insert-koin:koin-core:$koin_version\"\n}\n```\n\n## 应用概览\n\n该应用程序的目的是管理一个用户列表，并在我们的 `UserApplication` 类中显示它：\n\n> Users -> UserRepository -> UserService -> UserApplication\n\n## \"User\" 数据\n\n我们将管理一个 User 集合。以下是数据类：\n\n```kotlin\ndata class User(val name : String)\n```\n\n我们创建一个 \"Repository\" 组件来管理用户列表（添加用户或按名称查找用户）。以下是 `UserRepository` 接口及其实现：\n\n```kotlin\ninterface UserRepository {\n    fun findUser(name : String): User?\n    fun addUsers(users : List<User>)\n}\n\nclass UserRepositoryImpl : UserRepository {\n\n    private val _users = arrayListOf<User>()\n\n    override fun findUser(name: String): User? {\n        return _users.firstOrNull { it.name == name }\n    }\n\n    override fun addUsers(users : List<User>) {\n        _users.addAll(users)\n    }\n}\n```\n\n## Koin 模块\n\n使用 `module` 函数来声明一个 Koin 模块。Koin 模块是我们定义所有要注入的组件的地方。\n\n```kotlin\nval appModule = module {\n    \n}\n```\n\n让我们声明我们的第一个组件。我们想要一个 `UserRepository` 的单例，通过创建一个 `UserRepositoryImpl` 实例\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n}\n```\n\n## UserService 组件\n\n让我们编写 UserService 组件来请求默认用户：\n\n```kotlin\nclass UserService(private val userRepository: UserRepository) {\n\n    fun getDefaultUser() : User = userRepository.findUser(DefaultData.DEFAULT_USER.name) ?: error(\"Can't find default user\")\n}\n```\n\n> UserRepository 在 UserPresenter 的构造函数中被引用\n\n我们在 Koin 模块中声明 `UserService`。我们将其声明为 `single` 定义：\n\n```kotlin\nval appModule = module {\n     single<UserRepository> { UserRepositoryImpl() }\n     single { UserService(get()) }\n}\n```\n\n> `get()` 函数允许 Koin 解析所需的依赖项。\n\n## 在 UserApplication 中注入依赖项\n\n`UserApplication` 类将帮助从 Koin 中引导实例。它将解析 `UserService`，这要归功于 `KoinComponent` 接口。这允许使用 `by inject()` 委托函数注入它：\n\n```kotlin\nclass UserApplication : KoinComponent {\n\n    private val userService : UserService by inject()\n\n    // display our data\n    fun sayHello(){\n        val user = userService.getDefaultUser()\n        val message = \"Hello '$user'!\"\n        println(message)\n    }\n}\n```\n\n就这样，你的应用程序已准备就绪。\n\n:::info\n`by inject()` 函数允许我们在任何扩展 `KoinComponent` 的类中检索 Koin 实例\n:::\n\n## 启动 Koin\n\n我们需要使用我们的应用程序启动 Koin。只需在应用程序的主入口点，即我们的 `main` 函数中调用 `startKoin()` 函数：\n\n```kotlin\nfun main() {\n    startKoin {\n        modules(appModule)\n    }\n\n    UserApplication().sayHello()\n}\n```\n\n:::info\n`startKoin` 中的 `modules()` 函数加载给定的模块列表\n:::\n\n## Koin 模块：经典或构造函数 DSL？\n\n这是我们应用程序的 Koin 模块声明：\n\n```kotlin\nval appModule = module {\n    single<UserRepository> { UserRepositoryImpl() }\n    single { UserService(get()) }\n}\n```\n\n我们可以使用构造函数以更紧凑的方式编写它：\n\n```kotlin\nval appModule = module {\n    singleOf(::UserRepositoryImpl) { bind<UserRepository>() }\n    singleOf(::UserService)\n}\n```\n",
      "lastUpdated": "2025-04-03T12:41:18.686Z"
    }
  }
}